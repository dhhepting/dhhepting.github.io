raw: []
last_ts_read: '1611889989'
offering:
  id: CS-205-202110
cooked:
- desc: Today in class, after doing the translations between the Unicode values for
    characters and basic hexadecimal numbers, I will need to do a little bit more
    looking into how these translations occur. I had a bit of difficulty following
    why we used the 10 at the beginning of the bites but I'm sure after a bit of searching
    I can have a greater understanding.
- desc: Had trouble grasping exactly how the UTF-8 encoding process works. It was
    a little difficult to follow along with the examples, but I think when the last
    example (smiley face) is redone to fix the errors made in the class example that
    could help clear up some confusions.
- desc: 'I found the concept of encoding and decoding Unicode to be fascinating. I
    particularly enjoyed the TedX video recommended about Unicode.


    Encoding the Unicode to binary was certainly the most difficult part of this class.
    I tried to figure it out before class, but it was certainly a lot more difficult
    than when explained in class!


    I''d be very curious to learn about how entropy was used in the Unicode encoding
    process. Was there a significant amount of analysis on the alphabet and other
    characters as to what was most common? Was there some other technique used?


    This is related to the last class due to encoding. We''ve been discussing the
    idea of encoding for some time now, particularly Unicode and UTF8.'
- desc: I learned UTF-8 in this class, and I learn transfer between the number and
    hexadecimal. It is not hard, hope I can learn more about UTF-8.
- desc: I'm a little unclear on what the leading bits in the UTF-8 encoding bytes
    are used for, it seems to me like wasted bits.
- desc: In today's lecture, we converted HEX code to binary and the smiling emoji
    into binary as well. We also watched a video talking about this concept, it was
    interesting.
- desc: On meeting 4 we learned how binaries work. And also we did some hexadecimal
    to binary conversions, out of these hexa to binary conversion the most interesting
    was converting simile emoji to binary.
- desc: 'An important thing I learned from this class was UTF-8 encoding. It was interesting
    to know exactly how the characters are encoded online.


    The one thing I didn''t get from this lecture was how exactly the character numbers
    are assigned in the encoding in the first place. Was the English language assigned
    the first "x" characters and now some company is in charge of adding new codes
    for emojis and such?

    I have already used decimal, binary to hex, etc. before in other classes so this
    was a good refresher to confirm what UTF encoding was.


    I hope to learn more about unicodes and text/emojis in the next class.'
- desc: In our 5th meeting we talked about saving up to 4 bytes or 8 bits of data
    transfering when using and sending code in UTF-8 or UTF-16 forms. We also talked
    and did a few examples about encoding a UTF-8 emoji into binary and hexadecimal
    code.
- desc: I will go over the reasons for the extra bits and how it relates to our class
    discussions so far in our meeting tomorrow [smile]
- desc: 'The most important thing that I learned was binary encoding works and how
    can we encode UTF 8 Unicode, and also converting them to hexadecimal codes.

    It was also interesting to know that there is a possibility of ternary computers
    and quantum computers. Looking forward to knowing more about this.'
- desc: In this class I have learned about Unicode Transformation Format example UTF-8.
    Instead of using 4 bytes character every time we use UTF-8 as an encoding format
    for code points. UTF-8 uses as low as 8 bits to encode former ASCII characters
    up to 32 bits. ASCII is included inside Unicode, but ASCII only needs 7 bits.
    We worked on a worksheet and Smiley face emoji. I learnt how to convert Unicode
    to binary; Insert bits into required form and converting into hexadecimal.
- desc: In last lecture we learned about how computers, laptops and other machines
    stores informations and data in Binary code.
- desc: in the last lecture we learn about unicode and decode some heaxadecimal variables
    into binary. The ascii code have many alphabets and symbols. also we used some
    examples of numbers and letters then decode it to binary.
- desc: In the last lecture we learn about hexadecimal to binary conversion and smile
    emoji to binary.
- desc: 'During the meeting 5 i learn how to convert Unicode value into binary. ,How
    to determine the bits of the last code point .

    As well as got to know about how exactly binary code works and what letter does
    any particular number corresponds to .'
- desc: In previous class, I learned how binary system works as well as learned how
    to encode character in binary and hexadecimal. To encode character, it is important
    to know how to convert decimal to binary as well as to know which number is greater
    than or less than or equal to another binary number to determine which Last Code
    Point to choose to encode character.
- desc: 'In this meeting, I learned that bits are encoded and decoded in different
    systems such as UTF-8.

    Last meeting I had trouble relating the decision tree to encoding.

    I would like to be introduced to more character encoding systems.

    I found that some emojis were encoded differently in different platforms. I found
    that certain emojis were unavailable on android device that was available on my
    apple devices.'
- desc: In last lecture I learned so many interesting things about UTF-8. How we can
    use UTF-8 method for converting Hex code into the binary and other such information
    like emojis into binary as well. UTF-8 uses as low as 8 bits to encode previous
    ASCII characters from 0 to 32 bits.
- desc: we learnt how transfer and decode utf-8, but I do not understand how it can
    relate color of indexed views.
- desc: 'I''ve learned that Unicode is the superset of ASCII.

    As ASCII only has 256 characters with very few symbols. But Unicode on the other
    gives freedom of writing various characters not only including the English alphabet
    but including most of the other languages in the world.

    Unicode can write up to 65,536 characters and symbols'
