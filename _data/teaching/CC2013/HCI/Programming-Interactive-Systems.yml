Motivation: To take a user-experience-centered view of software development and then cover approaches and technologies to make that happen.
Topics:
- Software Architecture Patterns, e.g., Model-View controller; command objects, online, offline (cross reference PL/Event Driven and Reactive Programming, where MVC is used in the context of event-driven programming)
- "Interaction Design Patterns: visual hierarchy, navigational distance"
- Event management and user interaction
- Geometry management (cross-reference GV/Geometric Modelling)
- Choosing interaction styles and interaction techniques
- "Presenting information: navigation, representation, manipulation"
- Interface animation techniques (e.g., scene graphs)
- Widget classes and libraries
- Modern GUI libraries (e.g. iOS, Android, JavaFX) GUI builders and UI programming environments (cross reference PBD/Mobile Platforms)
- "Declarative Interface Specification: Stylesheets and DOM"
- Data-driven applications (database-backed web pages)
- Cross-platform design
- Design for resource-constrained devices (e.g. small, mobile devices)
Learning-Outcomes:
- Explain the importance of Model-View controller to interface programming. [Familiarity]
- Create an application with a modern graphical user interface. [Usage]
- Identify commonalities and differences in UIs across different platforms. [Familiarity]
- "Explain and use GUI programming concepts: event handling, constraint-based layout management, etc. [Familiarity]"
