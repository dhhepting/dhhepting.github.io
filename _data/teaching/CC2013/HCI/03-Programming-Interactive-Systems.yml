preamble:
- label: Motivation
  desc: To take a user-experience-centered view of software development and then cover approaches and technologies to make that happen.

topics:
- label: t01
  desc: Software Architecture Patterns, e.g., Model-View controller; command objects, online, offline (cross reference PL/Event Driven and Reactive Programming, where MVC is used in the context of event-driven programming)
- label: t02
  desc: "Interaction Design Patterns: visual hierarchy, navigational distance"
- label: t03
  desc: Event management and user interaction
- label: t04
  desc: Geometry management (cross-reference GV/Geometric Modelling)
- label: t05
  desc: Choosing interaction styles and interaction techniques
- label: t06
  desc: "Presenting information: navigation, representation, manipulation"
- label: t07
  desc: Interface animation techniques (e.g., scene graphs)
- label: t08
  desc: Widget classes and libraries
- label: t09
  desc: Modern GUI libraries (e.g. iOS, Android, JavaFX) GUI builders and UI programming environments (cross reference PBD/Mobile Platforms)
- label: t10
  desc: "Declarative Interface Specification: Stylesheets and DOM"
- label: t11
  desc: Data-driven applications (database-backed web pages)
- label: t12
  desc: Cross-platform design
- label: t13
  desc: Design for resource-constrained devices (e.g. small, mobile devices)

outcomes:
- label: l01
  desc: Explain the importance of Model-View controller to interface programming. [Familiarity]
- label: l02
  desc: Create an application with a modern graphical user interface. [Usage]
- label: l03
  desc: Identify commonalities and differences in UIs across different platforms. [Familiarity]
- label: l04
  desc: "Explain and use GUI programming concepts: event handling, constraint-based layout management, etc. [Familiarity]"
