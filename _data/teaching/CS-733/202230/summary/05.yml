Audio-Transcript:
- desc: Okay, so there's our attendance for today
  persid: ''
- desc: right so just
  persid: ''
- desc: Monday
  persid: ''
- desc: maybe think to think about
  persid: ''
- desc: Queen Elizabeth but we'll still have classes so that won't affect us directly
    your 730 for Monday
  persid: ''
- desc: okay
  persid: ''
- desc: so I talked about
  persid: ''
- desc: numbers we can represent with bits how many different values we can get? And
    I thought maybe I would start with
  persid: ''
- desc: an example of encoding things with bits. So this
  persid: ''
- desc: may be maybe I've explained too much
  persid: ''
- desc: because this I often do this for school kids as a magic trick
  persid: ''
- desc: so who likes magic Okay, so I'm going to ask you to basketball I took another
    COVID test yesterday, so I'm going, I'm still negative.
  persid: ''
- desc: I have this thing stuck in my throat
  persid: ''
- desc: since the beginning of the semester
  persid: ''
- desc: I'll ask your volunteer to think of a number between zero and 15. And I'll
    ask you four questions.
  persid: ''
- desc: And after you answer those four questions, absorb the psychic energy from
    the room and then I'll guess your number, right. Anyone like to Okay, so don't
    think of a number between zero and 50. Okay. Your Number in this card is your
    number on this card
  persid: ''
- desc: is your number on this card? No. Yes. You said no. You said yes.
  persid: ''
- desc: Can I can guess your number in a minute? Is your number on this card your
    numbers 13. Okay, do you want to think of a number number on this card. Okay.
    Is your number on this card is your number on this card? Is your number on this
    card
  persid: ''
- desc: okay
  persid: ''
- desc: 14 Is your to do one more or you want to just talk about this
  persid: ''
- desc: one a fan of Dynamo.
  persid: ''
- desc: Dynamo I'm not sure that I do.
  persid: ''
- desc: What I used to believe in only black magic. So
  persid: ''
- desc: this isn't black magic.
  persid: ''
- desc: So who's gonna guess a number
  persid: ''
- desc: okay JT.
  persid: ''
- desc: Is your number on this card. Is your number on this card is your number on
    this card is your number in this card numbers five okay. So any thoughts about
    the not black magic that I'm using? Because your numbers?
  persid: ''
- desc: So that's another way to think about my questions so I'm asking
  persid: ''
- desc: yes or no answers so there's a word here
  persid: ''
- desc: and I guess any letters
  persid: ''
- desc: knowing evil No, we
  persid: ''
- desc: yeah
  persid: ''
- desc: so our bits
  persid: ''
- desc: represent two to four values computer science we start with zero so, yes,
    the magic is
  persid: ''
- desc: I'm asking you to tell me your number in binary and then I convert it to decimal
    by adding
  persid: ''
- desc: powers of two together so one card
  persid: ''
- desc: has all the values on them. Yeah, they're odd numbers.
  persid: ''
- desc: Do the numbers that have the one the lowest bid set. They're the four bit
    numbers but that's the one so. So somebody said yes to this card. No to that card.
    Note to this one and yesterday. This one
  persid: ''
- desc: so you can see
  persid: ''
- desc: it what's the only number that appears on both cards?
  persid: ''
- desc: Yeah, so
  persid: ''
- desc: we have one here, plus a one there. So eight plus one is nine. So I have a
    few sets of these cards in my office if you want to
  persid: ''
- desc: amuse your friends and relatives with
  persid: ''
- desc: right so that
  persid: ''
- desc: so if we have
  persid: ''
- desc: a precision if with each pixel in our image we store four bits. Then we can
    represent 16 Different colors or we can represent 16 values of
  persid: ''
- desc: levels of gray.
  persid: ''
- desc: Zero would be black and then 15 would be white. And then
  persid: ''
- desc: in in between. So what's another way that we could use
  persid: ''
- desc: use that
  persid: ''
- desc: storage per pixel So if we have 16 values for those four bits, we could say
    index zero is fuchsia one is chartreuse, and three is Aquamarine and so on.
  persid: ''
- desc: Those are really colored. Those are really names of colors. I didn't make
    them up
  persid: ''
- desc: but it's so we can this is mentioned in chapter two as a way to save save
    space. It was originally developed as
  persid: ''
- desc: well because we wouldn't have the ability to represent full color on early
    graphics hardware.
  persid: ''
- desc: So we would load a color palette and maybe we would think about it a bit
  persid: ''
- desc: so you get 256 colors to work with. I don't think you see this problem anymore
    but it used to be that we have indexed images and we may not have the correct
    color palette loaded so they look wild
  persid: ''
- desc: so another thing we could do is say
  persid: ''
- desc: you can divide it up in two. I don't know that would be a very practical way
    to use it but
  persid: ''
- desc: with eight bits we could do four and two and two that's that's a little more
    reasonable. Wearing my computer graphics shirt today
  persid: ''
- desc: so you can think of color space try and create the illusion of a three dimensional
    object here. So if we have read this from zero to one green
  persid: ''
- desc: zero to one
  persid: ''
- desc: and this last one being blue, zero to one
  persid: ''
- desc: so red and blue together. Make Green and blue together. Make
  persid: ''
- desc: English of that color
  persid: ''
- desc: cap in our class last time the name of the color starts with C and then red
    plus green
  persid: ''
- desc: red and green together make
  persid: ''
- desc: no yellow
  persid: ''
- desc: so, fully saturated red is over here.
  persid: ''
- desc: And then the full value of green is over here. And then the full value of
    blues here.
  persid: ''
- desc: So, so this one, this vertex here is black and this one is white. So we can
    think of the diagonal going from black to white
  persid: ''
- desc: values along there will be grades
  persid: ''
- desc: so in terms of a user interface for colors
  persid: ''
- desc: red green and blue is a little maybe a little difficult to work with to specify
    colors.
  persid: ''
- desc: We can work with CQ and that's it free look down, block weight axis then we
    have the US
  persid: ''
- desc: so, we like to think about the ankles. We get different colors and go around
    the wheel and we see maybe this is. So if we just have
  persid: ''
- desc: the colors with a value of one
  persid: ''
- desc: then we give away a
  persid: ''
- desc: value of zero be black
  persid: ''
- desc: so, as we go on towards a particular color, let's say red we start with weight
    and then we get
  persid: ''
- desc: these tents and tones. So along this edge it's red it's dark and it goes from
    black to red. along that edge. And from this edge it goes from white to red so
    we get pinks and
  persid: ''
- desc: other reddish colors that seem all right
  persid: ''
- desc: so when you specify a color
  persid: ''
- desc: okay
  persid: ''
- desc: see how
  persid: ''
- desc: Okay so this is the code from the textbook sometimes change the color I'm
    wondering if like set increase the Zoom magnification
  persid: ''
- desc: Can you see that? Because it's not it's not a too big of a room here that
    we could
  persid: ''
- desc: that's great for coloring I will have to investigate some better colors
  persid: ''
- desc: so this is the HTML file for the triangles. So specify a vertex shader give
    it a type
  persid: ''
- desc: and so what happens
  persid: ''
- desc: as we take your input vector in
  persid: ''
- desc: for position vet before a vector with four values
  persid: ''
- desc: and then we're assigning
  persid: ''
- desc: GL position so that
  persid: ''
- desc: we're assigning to the GL This is a reserved variable the only effect of the
    vertex shader is to give a position of the point of the vertex and then the fragment
    shader
  persid: ''
- desc: I forgot. Here's the directive again. To say that we're dealing with 3.0
  persid: ''
- desc: graphics library Shader Language and I think he's not quite consistent with
    his declarations are their declarations of this but if we use medium P, medium
    precision for the float
  persid: ''
- desc: that'll be
  persid: ''
- desc: in any browser can handle that
  persid: ''
- desc: by so most can handle high precision. So sometimes you'll see precision high
    p and so the outcome of this is
  persid: ''
- desc: we're assigning a stat and color for the fragment
  persid: ''
- desc: and it's mostly red with a little bit of green and blue and it's
  persid: ''
- desc: semi transparent that's hard to discern because it's on a white background
    so let's pick a new color
  persid: ''
- desc: purple okay.
  persid: ''
- desc: How would you mix up purple so red, no green
  persid: ''
- desc: maybe not full red.
  persid: ''
- desc: Hold try point nine. Purple is a difficult color for me. Like partial colorblindness?
  persid: ''
- desc: Don't think that's purple okay. Well so
  persid: ''
- desc: when we decrease intensity of the red and blue. We're moving along
  persid: ''
- desc: the outer face of that triangle I drew on the board over there. So let's let's
    try that okay. This Navy triteness? When do I need to get source viewer
  persid: ''
- desc: on windows there okay.
  persid: ''
- desc: So that's a little friendlier color so we have
  persid: ''
- desc: so this is a JavaScript declaration so that we're turning on
  persid: ''
- desc: checking so that we're we're using the strict
  persid: ''
- desc: strict rules for JavaScript and so we have variable
  persid: ''
- desc: g GL that's gonna hold or
  persid: ''
- desc: are our canvas the context that our connection HTML page.
  persid: ''
- desc: So if
  persid: ''
- desc: the assignment
  persid: ''
- desc: return so if
  persid: ''
- desc: the value returned from Canvas get context
  persid: ''
- desc: is now
  persid: ''
- desc: so say that GF Web GL 2.0 isn't available
  persid: ''
- desc: and so we're going to
  persid: ''
- desc: create an array of
  persid: ''
- desc: so minus one minus one, zero to one
  persid: ''
- desc: minus or pardon me one to minus one. Sooner started minus one minus one go
    to zero n one
  persid: ''
- desc: then end up at son and that triangle gets mapped onto our our canvas. Okay
    So changing the clear color the background color of our Canvas
  persid: ''
- desc: we changed. Eric just in refreshed so there we have the cyan background. So,
    you can see this is the theory of the canvas created it to be square containing
    the triangle in it okay so the way we set up our programs is we do initialization
    here so, when, when the window is finished loading, we've run the net function
    and that so we get to the idea of our canvas and we get from the HTML file and
    then we get the context. And we use WebGL to set Web GL 2.0. Use all those features
    and then and then we're setting the viewport to these remapping our coordinates
    from
  persid: ''
- desc: our description of the points into the onto the canvas so and then we're setting
    the cyan color for the back for the clear to clear the canvas
  persid: ''
- desc: and then we're loading the shaders and then read. So we have a variable for
    program to represent the shaders we've loaded. And then in the graphic, our graphics
    library a call to use program. So we're making use of a shaders.
  persid: ''
- desc: So we want instead of drawing things immediately, which is what was done in
    the past with earlier versions of OpenGL and GL for it so now we have retained
    load graphics. So we're we're doing is we're calculating the points or specifying
    points and loading them onto the graphical processing unit Graphics Processing
    GPU.
  persid: ''
- desc: So the way we do this is we create a buffer and then we bind that buffer to
    the in array buffer which is going to
  persid: ''
- desc: so we're indicating that it's going to store vertices and information or vertices
    about the model and then we're further specifying the buffer data. So we're creating
    the buffer then we're associated we're describing what the buffer is going to
    do. And then we're loading the data from the points array. And we're saying that
    this is going to be used to create a static image so it's going to be rendered
    once. So if we're going to put the set of data onto the GPU and do some animation,
    so once we had the cut points calculated, we might choose another. We might choose
    dynamic draw here to indicate that the point the points in the in the buffer will
    be used over and over again
  persid: ''
- desc: without changing it so we're making this a so we've looked reloading the buffer
    with this data. And then the next bit is enough to make a connection between the
    buffer the data on the GPU and the buffers with the shaders that we're using.
  persid: ''
- desc: So if we remember here, let me bring up so we have this one variable a position
    so we're going to make an association between a position shader and the data on
    the GPU sorry, the saying creating a variable a position and we're going to get
    the attribute location from the program of a position
  persid: ''
- desc: so we're going to say that there are two values in the position and they're
    flipped floating point numbers and some other descriptions of these default values
    for these last three parameters, and so we enable
  persid: ''
- desc: this connection the connection between our a position variable in the shader
    and the data in on the GPU. So once you've done that we can do render. So the
    rendering is first to clear the screen with our color or clear color and then
    draw arrays. So we're going to draw starting from position zero and three, three
    include three vertices and then so this will give us one triangle so Okay, I can't
    do that.
  persid: ''
- desc: I can do this.
  persid: ''
- desc: I should make the point size a little bigger Well, it's not going to do something
    wrong. Here. Okay, this gives me a chance to
  persid: ''
- desc: do invoke the.
  persid: ''
- desc: So this is a clear indication that I'm more much more familiar with the Mac
    and the PC. That's probably a good reason why it's not working. Just take that
    out. Okay. So I will figure out what the syntax was that I messed up there and
    provide an example with so I talked about making more triangles and changing colors.
    Anyone okay.
  persid: ''
- desc: So, here we go with the HTML with multiple triangles. So we've changed the
    vertex shader
  persid: ''
- desc: and the fragment shader, so you getting a color and then we're making that
    into the vertex color and the position specified from the application will be
    the GL position.
  persid: ''
- desc: That's what happens in the vertex shader and then in the fragment shader,
    we're taking the color that we get from the vertex color and assigning it to the
    variable f f color for the fragment.
  persid: ''
- desc: So do the same thing with a net. And I'm doing some other things here. That
    we'll talk about later. But I've given points I've added more points. So we start
    with minus one minus one, zero to minus one, zero 2.5. And then one minus 110
    and 00 so we're, first of all, transform it transferring that data to vertex buffer,
    create a buffer and make the same settings as we did earlier. And then we get
    the associated connect the variable a position in the shader with the data we
    have put onto the GPU. And then we do the same thing with colors. So we have a
    red color, red color, red, and this is cyan, Cyan and cyan. So then we create
    a color buffer for the colors and we put that transfer that data to the GPU. And
    then we're getting that the color variable from the shader and making the connection
    with the data on the GPU. And we're saying that each each value of a color is
    going to have four values so rgba
  persid: ''
- desc: and square float. And then we're enabling this this variable. So when I go
    to Render we clear the color and redraw to triangles. One starting at zero for
    three vertices and the other one starting at index three. For three vertices.
    So I mean, change that
  persid: ''
- desc: see if I can do better with my editing.
  persid: ''
- desc: Okay, so we didn't get the second triangle
  persid: ''
- desc: if you look at the
  persid: ''
- desc: this is a better error message than I get on my Mac. So we can because we're
    working with JavaScript, we can access the JavaScript console for information.
    So WebGL warning draw arrays instance. Vertex fetch requires nine but attributes
    only supply sex.
  persid: ''
- desc: So that's an indication that you made a syntax error. Because I said, draw
    triangles for starting at three and he's six vertices, but there's only six altogether.
    So I don't need to do this separately. I can say draw triangles
  persid: ''
- desc: change this to six? And against the other triangle back. So it makes sense.
    So in the program, we're initializing data
  persid: ''
- desc: so the data we need to transfer to the GPU is always going to be I Tripoli,
    floating or standard format so we can we can do this by declaring the arrays we
    use as float 32 array or we can use JavaScript arrays and then use a function
    called flatten to to take out make them into standard floating point arrays. Because
    that's that's the only thing that we can put into the arrays here.
  persid: ''
- desc: So we set up
  persid: ''
- desc: so we need every program needs to shade the vertex and fragment shader. So
    we set those up, and then we connect the code for the shaders with the information
    that we're storing on the GPU. And then we say render. And if there's problems
    first place to check is the JavaScript console, see what's going on. Anyway so
    I guess we're out of time for today. So I'll clear up some of these things and
    post some material on the web before end of the week. Anyway, thank you very much
    for today. And if you'd like the card trick, if you'd like to sort of have a set
    of cards for your own income, save me some time during office hours.
  persid: ''
- desc: Thanks for your patience with my fumbling over the keyboard and I will figure
    out how to make the font bigger better colors. Anyway, thanks again.
  persid: ''
- desc: Thanks for your patience with my fumbling over the keyboard and I will figure
    out how to make the font bigger better colors. Anyway, thanks again.
  persid: ''
offering:
  id: CS-733-202230
