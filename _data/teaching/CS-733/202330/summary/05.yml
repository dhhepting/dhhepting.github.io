Audio-Transcript:
- desc: Okay
  persid: ''
- desc: you connect the computer to the display display
  persid: ''
- desc: made it through okay
  persid: ''
- desc: so anyone has anyone been able to use the online text or an earlier version
    of se seven that's in print?
  persid: ''
- desc: The only one yes.
  persid: ''
- desc: Okay I haven't gone through it but I have access to it
  persid: ''
- desc: okay
  persid: ''
- desc: so this website is the one that has the causal support for this book so we'll
    talk about the first assignment on Wednesday, and we'll be due two weeks plus
    two days after that on the Friday
  persid: ''
- desc: for now it's not mine
  persid: ''
- desc: Okay, and then here I've indicated the dates for exams
  persid: ''
- desc: and if you click on those, they go to the URL courses assignments which won't
    require you to submit anything we just there so it shows up on the calendar
  persid: ''
- desc: so any questions or concerns about finding things on the website and your
    courses
  persid: ''
- desc: so I've been trying to make my code directory seem a bit more friendly
  persid: ''
- desc: so this is on a patchy set up to do list the files there
  persid: ''
- desc: it's a bit and I'm not sure I've been doing it the most efficient way but
    so this gives you the breadcrumbs at the top. So this this file gets printed out
    and then it shows the directories there
  persid: ''
- desc: so let's see examples of three Jas.
  persid: ''
- desc: So I have in my three Jas directory, the node packages, the node modules installed
    so then you can see the node modules the package dot lock and package dot JSON
    files so that just gives you an indication of the files that you might have in
    your own directory.
  persid: ''
- desc: I can update this file this should be the index dot HTML here we're not gonna
    look at this code today but I
  persid: ''
- desc: so because we're running if you if you're doing it with NPM running these
    programs with light so it set up it was set up
  persid: ''
- desc: to show the HTML files and not render them, so you can just click on the HTML
    files and see them so note that I'll fix that after class today.
  persid: ''
- desc: Morning
  persid: ''
- desc: so I copied some code from
  persid: ''
- desc: the indirect interactive computer graphics.com website. So these are common
    files here. So m V, M versions of it. So that's a library for matrix and vector
  persid: ''
- desc: operations.
  persid: ''
- desc: Let me just show.
  persid: ''
- desc: Not I haven't gone through to define what the difference between them V J.
    S and M V new GS is. Flattened Jas, just I think is the function to turn a JavaScript
    array into a floating point, like triple JavaScript array which has a lot of extra
    information into it in into a form where it just has a floating point numbers
    in it. And these are about loading shaders. And I don't remember utility is at
    this point. But anyway, those are the common.
  persid: ''
- desc: So we don't want to have we don't need to have too much direct exposure to
    the stuff in there. It's just files that will help that we need to have the code
    run.
  persid: ''
- desc: So h e o two, that's eighth edition chapter two.
  persid: ''
- desc: So we'll hold off on that for a minute.
  persid: ''
- desc: Okay, so we're gonna look at graphics start on graphics programming today.
    If you haven't done it already, take a minute to record your attendance. And these
    are just for your information. These are all your courses links.
  persid: ''
- desc: So we had so
  persid: ''
- desc: I had 11 responses. So I'm just highlighting some of those. Here's a common
    vote raster versus vector. So what's the essential difference
  persid: ''
- desc: between those two kinds of displays.
  persid: ''
- desc: Going row by row Now.
  persid: ''
- desc: knew the same primitive
  persid: ''
- desc: looks less like a flower and more. Well, who knows.
  persid: ''
- desc: So what,
  persid: ''
- desc: what are some advantages or disadvantages you can see. which is
  persid: ''
- desc: a repeat of bottom vector because it's arbitrary so you're overlapping
  persid: ''
- desc: Yeah, so maybe this is inefficient.
  persid: ''
- desc: Vector is
  persid: ''
- desc: a lot more detail than raster lines
  persid: ''
- desc: just smoother
  persid: ''
- desc: the exact opposite for less difficult it's more efficient than dropping
  persid: ''
- desc: okay
  persid: ''
- desc: W foster to
  persid: ''
- desc: generate.
  persid: ''
- desc: Well, that was
  persid: ''
- desc: the thing. So if we have a raster image and we have the bitmap, we have the
    pixels computed already and it's just transferring them to display
  persid: ''
- desc: that that's fairly quick. Whereas, we have to generate the pixels with a vector
    format because we don't have purely vector displays anymore, really. Maybe you
    could say a plotter is a vector device, it's more pure vector display but when
    we're talking about monitors, they're all bitmapped. So there's a step of scan
    converting the perimeters at the appropriate resolution
  persid: ''
- desc: so that's why it might be a couple more there
  persid: ''
- desc: okay, graphics pipeline. So we start with vertices. Do some transformations
    and end with fragments. So
  persid: ''
- desc: we'll talk about
  persid: ''
- desc: that in much more detail. So graphics and visualization are important in daily
    life. There's lots of things that we see in visual form. So having some having
    the literacy to understand those forms is important. And it lets us see Marvel
    superheroes in action and on the big screen so there's a combo graphic design.
    I'd say that that's not necessarily what we're doing here. But computer graphics,
    and animation are tools for graphic design. So that might be an area of interest
    for you, that you might pursue and this class can help you understand.
  persid: ''
- desc: Our computer can be an effective tool for graphic design. And lastly, I bought
    a synthetic camera so I think that's a very powerful model.
  persid: ''
- desc: So
  persid: ''
- desc: I know I've drawn the camera bigger than the person here so forgive me for
    that please. But that is our take taking a picture of a scene and light passes
    through the pinhole and we see the the image appear upside down
  persid: ''
- desc: on the film
  persid: ''
- desc: what we're doing with our synthetic camera.
  persid: ''
- desc: I'm not sure how the picture is in the book
  persid: ''
- desc: so the idea is we're putting the image plane at the front our before the focal
    point so we're not reversing it. We're just we're projecting onto the film here
  persid: ''
- desc: this is a pyramid
  persid: ''
- desc: if we're doing a perspective projection, and if we're doing a plan projection,
    or orthographic then it'll be
  persid: ''
- desc: a parallel pipe it
  persid: ''
- desc: that's too general it would be.
  persid: ''
- desc: So it makes sense
  persid: ''
- desc: anyway, I won't apologize again for my drawings
  persid: ''
- desc: so I just
  persid: ''
- desc: wanted to point out this is a benefit of having UTF eight as the format for
    webpages because you get an accent on the end for the Polish mathematician walk
    la Pinsky. So UTF eight gives us all the Unicode characters and we can do so it's
    variable length encoding was so if we have the standard North American English
    characters, otherwise known as ASCII. Put in UTF eight
  persid: ''
- desc: the first seven bits the character encoding match ASCII. So ASCII is seven
    bits. So for doing North American English words, it doesn't have accents we can
    get away with seven bits. And then we can store text in a format of we're using
    one byte per character, so it's very efficient. When you want to do characters
    like this, then we have to go out side of one byte. But the UTF eight encoding
    lets us do that easily. So are you able to see on my Mac if I hold down the key
    and it gives me alternatives with the accents
  persid: ''
- desc: anyway
  persid: ''
- desc: so there's a shape called a sir Pinsky gasket. So anyone heard of that? before?
  persid: ''
- desc: So this is
  persid: ''
- desc: just gotten a lot of interesting stuff for the show Pinsky triangle web Wikipedia
    page
  persid: ''
- desc: so I had the privilege of spending some time working for Benoit Mandelbrot
    at IBM and long time ago
  persid: ''
- desc: so there's this webpage says
  persid: ''
- desc: that he called it a gasket because you reminded him of a gasket used in car
    motors I seem to remember him caught saying that there was a joke because the
    serpins he gasket doesn't look like it could see anything.
  persid: ''
- desc: So what does it look like?
  persid: ''
- desc: So we can start
  persid: ''
- desc: with a triangle and then divided into four triangles I'm gonna leave the middle
    one out
  persid: ''
- desc: we keep doing this
  persid: ''
- desc: do one more.
  persid: ''
- desc: LZ the highest resolution of this trip my best piece of chalk and you
  persid: ''
- desc: you get the idea. Here. Shape is
  persid: ''
- desc: I think I did
  persid: ''
- desc: so again, the caveat here is all the all the little triangles and the little
    triangles are supposed to be the same size
  persid: ''
- desc: so we
  persid: ''
- desc: can generate them recursively or there's another approach called the chaos
    game.
  persid: ''
- desc: So we start with a point, let's say
  persid: ''
- desc: here, and then we pick a few vertex at random and move the point half the
    distance to that selected vertex.
  persid: ''
- desc: So if we pick this point,
  persid: ''
- desc: pick this vertex pardon me. Then we move the point that half the distance
    and I'd say we've picked it again and then we're moving in about half well
  persid: ''
- desc: and then let's say we pick this one I move it halfway.
  persid: ''
- desc: So
  persid: ''
- desc: is a fellow Michael Barnsley who developed the chaos game? He said it's a
    bit like once you get the ball thrown into the soccer pitch or the football pitch
    and then the skilled players take over and passing these passing the ball around.
    And so if we watch this over time, we'll see that this shape becomes filled in.
  persid: ''
- desc: So in the text,
  persid: ''
- desc: they say pick an initial point a random inside the triangle. So I'm I say
    or better yet one of the vertices I didn't do that in the example here.
  persid: ''
- desc: Why do I Why do I suggest or?
  persid: ''
- desc: Why do I suggest a vertex or why was the point I picked? A good choice as
    the same characteristics
  persid: ''
- desc: so I picked this point. That was my that's what I attempted to do. So that
    point is under shape. already. If I pick a point at random, I could pick a point
    here. And then it will take a few iterations to get close to the shape so it'd
    be a few points that aren't part of the shape. So that's so in this case, we know
    that all the fixed points of the vertices
  persid: ''
- desc: are if we think of a transformation centered at each vertex, each vertex is
    a fixed point. So if you apply the transformation to the vertex, you get the same
    point.
  persid: ''
- desc: So we're not generating any points outside of the shape or after, so it makes
    sense. Anyway, so they're gonna pick once we have a starting point, we're gonna
    pick one of the vertices at random. Find the point Q, halfway between P and the
    selected vertex display Q by putting some sort of markers such as a small circle
    at the corresponding location on the display. replace P with Q and return to step
    two. So we're we're doing a loop here.
  persid: ''
- desc: Sure that I had it
  persid: ''
- desc: pointing to this page
  persid: ''
- desc: so here's
  persid: ''
- desc: I can't see that develop over time. But here's the idea. So this is randomly
    generated using a chaos game. So we're taking a point and pass it, moving it around.
    So we're doing this randomly, then we're going to get a fairly complete coverage.
    Of the shape.
  persid: ''
- desc: We will look at the code in a minute.
  persid: ''
- desc: So what are some ways we can
  persid: ''
- desc: generate this? So we can talk about immediate mode. So we can have this loop
    and then each time we generate a point we draw it onto the screen.
  persid: ''
- desc: So we're not storing any points. So
  persid: ''
- desc: what are some advantages or disadvantages? That you can see from that approach?
  persid: ''
- desc: So if we wanted to redraw the shape we don't have any geometry leftover so
    we have to regenerate it
  persid: ''
- desc: and the advantage is that we're not having to allocate it. We're just generating
    a one time we don't have to store the points we can just put them on display.
  persid: ''
- desc: So we can
  persid: ''
- desc: rearrange our graphic so that's one way to do graphics program. We can use
    retain mode graphics. So we're going to generate the points and store them and
    then draw them at once so we've got a list of points
  persid: ''
- desc: so we
  persid: ''
- desc: so we're generating the list of points. We're storing them and then we have
    routine to make use of that stored.
  persid: ''
- desc: Stored plays.
  persid: ''
- desc: If we want to do an animation of the triangle then we still might be creating
    a bottleneck because we're having to to move the points from the CPU handled by
    the CPU to the GPU. And then our third approach is that we can generate points
    store them, send them to the GPU and then draw the points using the GPU. So
  persid: ''
- desc: we can take out the need to transfer the points within the system repeatedly.
    We move it to the GPU and the GPU can
  persid: ''
- desc: handle the transformations and operations we need to do to create the animation
  persid: ''
- desc: so.
  persid: ''
- desc: Let's first look at our
  persid: ''
- desc: our source.
  persid: ''
- desc: So
  persid: ''
- desc: we're doing application we have an HTML file. That's gonna be rendered by
    the browser. And then we have the code the JavaScript code that's going to handle
    the dry
  persid: ''
- desc: Okay, so here's
  persid: ''
- desc: excuse me, here's our HTML file.
  persid: ''
- desc: So the first line says it's text HTML and the character set is UTF eight.
    So that lets us do the
  persid: ''
- desc: those
  persid: ''
- desc: character for example the second one is viewport. Content width device. width
    equals device width, initial scale equals one.
  persid: ''
- desc: So this helps us when we're
  persid: ''
- desc: looking at it on a phone it doesn't appear like it should be on doesn't appear
    tiny. Like like we're looking at a desktop website on our phone
  persid: ''
- desc: so here I'm
  persid: ''
- desc: gonna suggest that we use Bootstrap for HTML.
  persid: ''
- desc: I'll give you the links to this.
  persid: ''
- desc: So we don't have to deal with programming and Bootstrap is just using the
    using the features of it so we can use a CDN like J Jarius. Deliver dotnet.
  persid: ''
- desc: So that gives us the bootstrap and this first one is a style sheet.
  persid: ''
- desc: So then, in our HTML file,
  persid: ''
- desc: we define two things. We have a vertex shader and a fragment shader.
  persid: ''
- desc: So these are scripts as far as HTML is concerned. So these indicate the version
    or ship precision is medium for the float, and we
  persid: ''
- desc: have an F
  persid: ''
- desc: factor of f color.
  persid: ''
- desc: So F color is fragment color.
  persid: ''
- desc: So what color is this?
  persid: ''
- desc: Is it just
  persid: ''
- desc: read that yes, it's read?
  persid: ''
- desc: To know what else he stands for
  persid: ''
- desc: transparencies zero
  persid: ''
- desc: so we're giving,
  persid: ''
- desc: giving each fragment the color red and then the vertex shader
  persid: ''
- desc: we get the position we set the point size to one
  persid: ''
- desc: and position
  persid: ''
- desc: to the input position
  persid: ''
- desc: so these are
  persid: ''
- desc: variables available in WebGL.
  persid: ''
- desc: So we're assigning the point size of 1.0. And we're using a position so we'll
    see how that comes up later.
  persid: ''
- desc: When you look at the JavaScript file, chapter, gasket one.js. So we're looking
    at we need to bring in the image shaders file from the common area and MVC view
    as well. And then of course, guys got one dot j s. So let's do defines the heading
    area and then in the body we do a heading one for the gasket. The name of our
  persid: ''
- desc: web page. I love her web page. And here we're defining a card body back was
    dark background. And we have a HTML canvas with an ID
  persid: ''
- desc: so that we can refer to it using the
  persid: ''
- desc: DOM document object model. Let me give it a height width and the height and
    Jared snare will print this message and at the bottom of the page we have the
    script
  persid: ''
- desc: for we end the body. This is our script for Bootstrap. So we put it at the
    end to speed things up. A little bit. Okay, so that's your HTML
  persid: ''
- desc: All right. So when you use
  persid: ''
- desc: Bootstrap four or something similar
  persid: ''
- desc: that's what I use on my website.
  persid: ''
- desc: So what kind of editor do you use?
  persid: ''
- desc: VS code.
  persid: ''
- desc: I used to use atom until I used to use that it was Yeah. And then they stopped
    supporting atom so I wasn't happy with the first time I tried it but now I'm having
    a better better experience with it
  persid: ''
- desc: for someone who likes atom notepad plus plus also works
  persid: ''
- desc: okay
  persid: ''
- desc: yeah
  persid: ''
- desc: the shortcut key maps off the atom it's available in the VS code. So you can
    install the extension using the VS code.
  persid: ''
- desc: Yeah, I'm not I'm not very good with
  persid: ''
- desc: shortcuts I guess.
  persid: ''
- desc: I'm just trying to get by Well, that's not true. I mean, I'm not just
  persid: ''
- desc: I guess I'm not that connected to Adam that I would think I got it I have
    to bring them features or madam or to VS code. But anyway, I was using ES lint
    in atom and so I got that installed for VS code.
  persid: ''
- desc: And so if you see, if you look at this code
  persid: ''
- desc: it's different than the one on the website because I've run this through es
    lint with Google best practices as a style guide.
  persid: ''
- desc: So I think that's
  persid: ''
- desc: a good thing to do. Is anyone using ES lint
  persid: ''
- desc: Okay, that's good to hear.
  persid: ''
- desc: Okay, so what do we have to do here? So we're saying use strict
  persid: ''
- desc: so we have some variables like the domain for positions and the number of
    positions we're doing is 50,000.
  persid: ''
- desc: So that seems to
  persid: ''
- desc: be used to be the 50,000 points didn't go so quick. But
  persid: ''
- desc: it's that's
  persid: ''
- desc: this is nothing for modern we can even add listener What
  persid: ''
- desc: if we added a zero, so it's 500,000 points.
  persid: ''
- desc: The.
  persid: ''
- desc: Time doesn't change very much. Nor does the quality of the picture actually.
  persid: ''
- desc: Okay, so
  persid: ''
- desc: when we're loading, we're doing this init function when we're loading the
    window. So we're getting a canvas so this is using the DOM
  persid: ''
- desc: to get the element that we call GL canvas.
  persid: ''
- desc: Sir getting a
  persid: ''
- desc: WebGL to context for the canvas.
  persid: ''
- desc: So if we don't
  persid: ''
- desc: get if we don't get the return. GL then we haven't been able to get the web
    to GL to find out. One of the samples for Chapter Two says tries to get a G Web
    GL 1.0. And I'm not sure whether that's a mistake or
  persid: ''
- desc: what the case is. So here we're
  persid: ''
- desc: getting the vertices of the triangle. So we go minus one minus 1011. Minus
    one
  persid: ''
- desc: so he said minus one minus one.
  persid: ''
- desc: So here's 00.
  persid: ''
- desc: And then our second point is zero and one.
  persid: ''
- desc: And our third one is a one one. It's a one minus one. Right? Because one one
    would be over here. So this isn't quite an equal lateral triangle, but it's. So
    we have the chord, our world coordinates, we can think of as regenerating between
    minus one to 1x and minus one to one and y. So I've got a square.
  persid: ''
- desc: So then we're, we have to map those coordinates minus one to one minus one
    to one into our viewport which is
  persid: ''
- desc: 512 by 512. That we set up
  persid: ''
- desc: in ah, the HTML with our width, width and height okay.
  persid: ''
- desc: So specify a starting point position
  persid: ''
- desc: so this is a little more complicated and I would do it
  persid: ''
- desc: anyway, so we just
  persid: ''
- desc: naturally be inclined to say p equals vertex vertices zero or one as a starting
    point so, then we're going to add our initial position to arbitrary points. So
    we start by pushing.
  persid: ''
- desc: So, this is our JavaScript array.
  persid: ''
- desc: We push p into the array and it compute the new positions. So, arrays take
    i equals zero
  persid: ''
- desc: positions dot
  persid: ''
- desc: length so that's the current length of the array as we're pushing points into
    it. Is less than than the number of positions so this is the size that we're allocating
    for the array and then we're incrementing i.
  persid: ''
- desc: So for each iteration
  persid: ''
- desc: picking.
  persid: ''
- desc: Summer
  persid: ''
- desc: we're picking Sanjay is giving us an sorry Sanjay is going to be an index
    into the vertex array.
  persid: ''
- desc: So it's going to be 01 or two. And then we're going to
  persid: ''
- desc: take position i and add vertex j and then multiply by one half. And we're
    gonna add
  persid: ''
- desc: the new point into our positions array. So that's going to generate a list
    of 50,000 points.
  persid: ''
- desc: So here's what your parents were saying or WebGL.
  persid: ''
- desc: She held up viewport was from 00 to 512 and 512.
  persid: ''
- desc: And we're clearing the color and what is this color?
  persid: ''
- desc: It's white. Yeah. Sorry, RG and V. full intensity is
  persid: ''
- desc: as white so then we're going to add the shares through using the net shaders
    routine from
  persid: ''
- desc: that other file, and we're loading the vertex shader and the fragment shader
  persid: ''
- desc: and then so this is defined the program and then we're seeing use program
    with our
  persid: ''
- desc: GL context and our WebGL context. So now we're going to load the data into
    the GPU. So you create a buffer
  persid: ''
- desc: we're going to bind the buffer and the buffer data
  persid: ''
- desc: needs to go from this JavaScript array positions into just the float the IEEE
    three floating point
  persid: ''
- desc: array. So that's where the flattened function comes in.
  persid: ''
- desc: So now we're associating our shader variables will
  persid: ''
- desc: be in a buffer. Fortunately, yes, Linden doesn't catch spelling mistakes.
    I didn't either.
  persid: ''
- desc: Associate added shader
  persid: ''
- desc: variables with our buffer data with our data buffer.
  persid: ''
- desc: So now we're going to get the attribute of a position.
  persid: ''
- desc: So we're getting so this is a variable we're using to get together. So we're
    getting an attribute location from the context and so we're storing it in position
    lock and then we're pointing to add
  persid: ''
- desc: and then we're enabling that attribute for the array so then we do a renderer
    and the render so we're doing a clear
  persid: ''
- desc: draw the arrays from the data buffer as points should go from zero to 50,000.
  persid: ''
- desc: So let me go back
  persid: ''
- desc: okay
  persid: ''
- desc: so I just want to point out the connection here, so a position
  persid: ''
- desc: in our vertex shader.
  persid: ''
- desc: Paid position here so we're making that link. So again the positions of the
    points from the data buffer
  persid: ''
- desc: and so,
  persid: ''
- desc: when we draw the rainbow are getting the color assigned to the fragments and
    we get to read Sierpinski gasket
  persid: ''
- desc: so anyway, the other thing I wanted to mention about Bootstrap
  persid: ''
- desc: is so we have this
  persid: ''
- desc: card it's defined. It fills the whole web page. So that's why we have the
    background dark
  persid: ''
- desc: area beside
  persid: ''
- desc: the canvas that gets drawn here.
  persid: ''
- desc: To be okay
  persid: ''
- desc: let me see if I can do this quickly
  persid: ''
- desc: here.
  persid: ''
- desc: So this will look a little different because it's not running Apache. It's
    just
  persid: ''
- desc: jackhole the web brick server
  persid: ''
- desc: quickly show right
  persid: ''
- desc: I know
  persid: ''
- desc: I'm late here. Now.
  persid: ''
- desc: So there it is with 500,000 points.
  persid: ''
- desc: Anyway, I'm out of time today. So thank you very much for today. And if you
    will continue with chapter two on Wednesday. We'll talk about the first assignment
    that's wrong. Thanks again. Take care have a good day everyone. Thank you
  persid: ''
- desc: Anyway, I'm out of time today. So thank you very much for today. And if you
    will continue with chapter two on Wednesday. We'll talk about the first assignment
    that's wrong. Thanks again. Take care have a good day everyone. Thank you
  persid: ''
offering:
  id: CS-733-202330
