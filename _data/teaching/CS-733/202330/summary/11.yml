Audio-Transcript:
- desc: saw the riders last again no good news with that team this year thinking I
    watched just a few minutes I watched this before half and I saw that they were
    had so that was maybe my mistake and watching and thinking that they got under
    control.
  persid: ''
- desc: By the end they had given away they heard me this word just you that cricket
    is going to be its 2028 Olympic Games
  persid: ''
- desc: Okay, so here we are. What's that? Like? We also had one game in the house
    is Pakistan.
  persid: ''
- desc: The university it was streaming we gave in the morning to watch
  persid: ''
- desc: did your team win?
  persid: ''
- desc: Okay, so
  persid: ''
- desc: everything goes well I should have my computer back later today. My new one
    so I can show it off to you next. Next meeting
  persid: ''
- desc: have the new video adapter in preparation
  persid: ''
- desc: here's the one I want
  persid: ''
- desc: everyone see that I posted the exams from last year.
  persid: ''
- desc: Face to
  persid: ''
- desc: face too okay
  persid: ''
- desc: so on the page for the course. zimpler for anyone else? Yes. Okay, it's not
    just me.
  persid: ''
- desc: Let's see if this helps any.
  persid: ''
- desc: Says Sony, but I don't think it's remote for the projector.
  persid: ''
- desc: Let me see if I can get open
  persid: ''
- desc: Yeah, so DVD Okay, so we'll leave it with so these are, these are in alphabetical
    order. So there's the midterm from last year and the final exam from last year.
    So anyone had chance to look at them yet? And what do you think?
  persid: ''
- desc: Know? sites.
  persid: ''
- desc: So we can discuss the old exam and what you'd like to suggest to be on the
    new exam. We can do that on Wednesday. Okay.
  persid: ''
- desc: So let's say that the second one is going to be reviewed. So some people had
    some concerns about their marks and I had some other concerns about the instructions
    and whether they were anyway so stay tuned for assignment one.
  persid: ''
- desc: So I'll post the second assignment. Later today okay.
  persid: ''
- desc: Turning questions or dance or we did last last days before the break
  persid: ''
- desc: making sure we can have
  persid: ''
- desc: so I said that was a shorter exam last year, but I was wrong. It was Tuesday
    Thursday class it was 75 minutes as well. But the midterm last year was a month
    later. So we won't be doing the same things. We're going to focus on chapters
    one through five.
  persid: ''
- desc: Okay
  persid: ''
- desc: so I want to look at a couple examples. Example codes here
  persid: ''
- desc: and then we can critique critique the code that the author wrote are included
    with the textbook materials so, these last four buttons controlled to view that
    receipts we can make
  persid: ''
- desc: we can increase or change the aspect ratio can make it
  persid: ''
- desc: I can do the opposite here
  persid: ''
- desc: have two angles that we can play with all right, thank you very much
  persid: ''
- desc: so, now we're now we're looking down on flatten at somebody stepped in the
    hat and then we can increase the sample.
  persid: ''
- desc: impression that it's floating away here
  persid: ''
- desc: least I have that impression anyway. So we can do a bit of controls that way.
  persid: ''
- desc: Let's see if I can display at the same time
  persid: ''
- desc: so how would you rate this interface
  persid: ''
- desc: so now we can see. So what is Zed? Likely controlling as we see this picture
    changing?
  persid: ''
- desc: So how about the depth and we were talking about rendering within Cuba minus
    one plus one minus one to plus one minus one to plus one so if we set it up so
    that we're changing those front and back lanes and we get a portion only a portion
    of the out here so that makes sense.
  persid: ''
- desc: So here's the lesson JavaScript. Here's the HTML file
  persid: ''
- desc: so we have the two shaders. Our vertex shader is going to determine the new
    position based on it's going to take the position we get from the vertex buffer.
  persid: ''
- desc: Right that's, that's what's stored in a position multiply by the modelview
    matrix. And then by the projection matrix to get the new position.
  persid: ''
- desc: And the fragment shader is just speced is just assigning the frag color to
    whatever assigning the fragment color as whatever we pass it in this uniform color
    which is a vector with four positions so we're still we're passing our GPA
  persid: ''
- desc: so the, in their wisdom, their footing 12 Buttons named one through 12 Is
    that a mnemonic aid?
  persid: ''
- desc: Seven familiar with the word mnemonic. It's about helping with memory
  persid: ''
- desc: so that's all it's in the HTML file
  persid: ''
- desc: call the JavaScript files. Well, that's here.
  persid: ''
- desc: So Oh, sure.
  persid: ''
- desc: Better You're welcome
  persid: ''
- desc: so they have a function had to create the data for the for that shape we looked
    at we're looking at so we're filling the array data
  persid: ''
- desc: that's the first bit is for know how you would you think this is in terms
    of readable JavaScript code
  persid: ''
- desc: so he said near and far plane so near is minus 10 far as plus 10. So 10 is
    sort of sad is going into the it's going away from us. So that's the left hand
    and right because we're doing x times y.
  persid: ''
- desc: And Zed is away from us. Do you remember left and right handed you don't necessarily
    have to do this for you. You can also Well, there are other gestures you can make
    everyone. But that's the idea. That's the distinction because because with three
    dimensions we have a decision to make which way the positive set direction is
    going.
  persid: ''
- desc: And it's not like the WebGL is one or the other. It's it's flexible in terms
    of we're not required to think of things in terms of left handed or right handed
    coordinate systems. But we just need to be aware of what what we're doing. So
    that they all all our calculations fit together
  persid: ''
- desc: scores are set up, left and right
  persid: ''
- desc: then the radius is used to specify is used in a calculation of the eye position.
    of two angles theta and fee.
  persid: ''
- desc: To callers so we have red and black so red for the triangles and black for
    the outline of the faces of the quadrilateral faces.
  persid: ''
- desc: And we're saying we're looking at the origin here x y Zed is 000 and up is
    the positive y direction. So x 010. So this is the point. This is a vector. So
    that makes sense.
  persid: ''
- desc: And we're specifying the coordinates of our left to right and top and bottom
    of the viewport. They're centered around the origin. And then we have matrices
    that we're going to build in our JavaScript code, and then we're going to pass
    to our shaders. So this is the first line is defining the matrix storage or variables
    for the matrices. And this is going to be the location that we can access them
    with our GF or their WebGL program or make them available to the shaders to share
    between the shaders and JavaScript. So then we do the net function after we've
    loaded everything.
  persid: ''
- desc: So we're going to we're going to do a depth test and the function we're going
    to use is less than or equal. Let me just bring up that web page and bring it
    up before.
  persid: ''
- desc: We can say options we have are never so they'll never pass the test. I can
    use less of if an incoming value is less than that depth buffer value equal surpasses
    if the incoming value equals the buffer value. greater or less than or equal.
    So that's the one we're choosing here.
  persid: ''
- desc: Far as far as Greer's and near so less than or equal is going to sort of values
    with a less lesser depth are going to be closer to the eye position.
  persid: ''
- desc: So polygon offset fill is another mode we can enable and that means that we're
    going to be able to see the polygons in red and the outlines in black.
  persid: ''
- desc: So we're going to take the data and transform it into an array of positions.
  persid: ''
- desc: There we're going to associate that positions array with our vertex buffer
  persid: ''
- desc: and make that connection with the variable in our shader a position. Then
    here is a uniform color. So we're going to use that location to pass color information
    from our JavaScript to our shaders.
  persid: ''
- desc: And then, here's the part about saying that. naming things buttons, one to
    12 doesn't really help us understand what's going on in the code.
  persid: ''
- desc: So button one is clicked. year is going to be increased and far is going to
    be increased as well. So what's button one? Anyone remember what button was labeled?
  persid: ''
- desc: Increase it.
  persid: ''
- desc: Okay, so increase, increase in decrease, increase our decrease our so that's
    the radius that's going to affect the eye position. And then we have these two
    angles, theta and fee can increase and decrease them. And the last four buttons
    are changing the shape of the viewing area.
  persid: ''
- desc: So if we're increasing our and then we're doubling it and for decreasing our
    than we're having here and then we're incrementing. Some var is the increment
    in the angle. So we're adding an increment or subtracting an increment. Adding
    an increment or subtracting and increment here.
  persid: ''
- desc: So what is Dr?
  persid: ''
- desc: So is that about five degrees
  persid: ''
- desc: anyway
  persid: ''
- desc: so we're gonna calculate the IP so when we render it we're gonna calculate
    the eye position based on the radius and the angles
  persid: ''
- desc: and then we're going to set them the modelview matrix by using this look at
    function, so that's the eye position is the position we're looking at which is
    the origin here is the positive y direction. And then the projection matrix is
    an orthographic projection left right bottom top near far so it's a parallel projection.
    And then we're going to pass
  persid: ''
- desc: going to connect the data from the matrix and the JavaScript to the matrix
    in the shader. Because of all of you and for the projection, and then we draw
    the color draw the red triangles and the black outlines of the quadrilateral phases.
  persid: ''
- desc: Don't have this set up here? For editing sorry give me a second.
  persid: ''
- desc: You suspect something's wrong here. Let's see what
  persid: ''
- desc: All right
  persid: ''
- desc: Okay. Sorry for that. Delay
  persid: ''
- desc: so what are the changes will be interesting to make here?
  persid: ''
- desc: We just changed the up should be off to how we make it upside down.
  persid: ''
- desc: What else would be one of the comments you have about this interface
  persid: ''
- desc: Okay, so what if I make the abstract vector this vector instead what's going
    to happen if I make the effect your 110
  persid: ''
- desc: was going to be on the exam for sure
  persid: ''
- desc: anyone smile but that
  persid: ''
- desc: they're still looking nervous so what
  persid: ''
- desc: so we're gonna have the eye position somewhere I'm gonna be looking at something
  persid: ''
- desc: right so this is here I'm determining. If I'm looking at the chair in front
    of the front row here. There's a line between my eye the eye point and the point
    I'm looking at. So that defines one axis for the coordinate system of our synthetic
    camera. So what's another way that I can control the camera so imagine I'm still
    holding the chalk. And there's still that line from the high point to the look
    at point the point I'm looking at. Then I can go from landscape to portrait or
    I can do some some different angles so I can rotate around the axis from the eye
    point to the lookout point. Right. So that's what I'm specifying with up is which
    of these possible directions is going to be up for the camera? So does that make
    sense? So this is one vector here. And then I'm specifying which direction is
    up
  persid: ''
- desc: so I've, I've drawn this from the side so it's hard to tell but let's draw
    a version the same
  persid: ''
- desc: is if I have a project prospective projection, I can I wouldn't mind seeing
    the other the up vector come up like this. If I have an orthographic projection
    I won't see it. I'll just see what's in the plane. And in the exit plane. I know
    that it's coming out. By default the way we specified it as a positive y factor,
    positive y direction. It's going to be coming out of the of the accent plane like
    this
  persid: ''
- desc: Okay, so if not 010.
  persid: ''
- desc: We take that to be true does that seem like I'm telling the truth?
  persid: ''
- desc: Okay, I'm not lying. So what about what happens if you say this is the vector?
  persid: ''
- desc: So it doesn't matter that this is a longer vector. It's just the direction
    that's important. So what's the direction if we're looking at if we're looking
    at
  persid: ''
- desc: into the screen, so this is x and this is y. So we have a unit vector x needed
    vector and y.
  persid: ''
- desc: Okay, so let's, let's see what the result is. Can you make a prediction where's
    the hat going to be pointing
  persid: ''
- desc: is it going to be okay? Let's see.
  persid: ''
- desc: So we're saying instead of up being here
  persid: ''
- desc: you are still looking at the screen as being up. So we're looking at this
    direction being up, sort of rotate it so that this is pointing up on the screen
    then we get had been tipped over by 45 degrees.
  persid: ''
- desc: It was like if I took a picture with this being up and when I see it I'm rotating
    the whole thing by 45.
  persid: ''
- desc: So this means so what I'm looking at I have another when I bring it back to
    the viewing position because this was up I'm then putting in another rotation
    from
  persid: ''
- desc: this rotation appears as the effect of having vectors so you the F factor
    is looking. In the original data, the architecture is like this right because
    it's pointing off direction of the 45 degrees. Next and Zed so that's when we
    know that's where where it is relative to the hat. Then this axis becomes alignment,
    positive y axis or display so that makes sense.
  persid: ''
- desc: To me, that would be a nice a more meaningful one to manipulate was the interface
    because then you would see the impact of it
  persid: ''
- desc: so if we decrease our bridges, so we started a distance of one How much are
    we decreasing it by?
  persid: ''
- desc: Decreasing it by half. So quite quickly, we should get into the middle of.
  persid: ''
- desc: One This is the one we have modified
  persid: ''
- desc: the console Okay, so for going to decrease our then what do we think is going
    to happen?
  persid: ''
- desc: What's gonna happen to the picture?
  persid: ''
- desc: Shouldn't be nothing
  persid: ''
- desc: you so another thing would be helpful some feedback about what's happening
    with these controls. So we could see what the values are.
  persid: ''
- desc: Okay now decreasing sets or cutting, cutting off some of the
  persid: ''
- desc: so now we're left with just the strip in the middle
  persid: ''
- desc: so to me it seems like our should have if the if really decreasing, decreasing
    our than it should have gotten closer and closer to the to the hat
  persid: ''
- desc: Okay, let's let's look at a couple other ones. Here.
  persid: ''
- desc: Let's try also one more buttons to deal with
  persid: ''
- desc: so you can see here we're only seeing one toward the queue. So if we increase
    our
  persid: ''
- desc: it's moving. We're moving further away. So that seems to be working okay.
    Because then if we increase that we should see more of the cue.
  persid: ''
- desc: So this is an orthographic projection so we're having projectors parallel
    to the viewing plane and then we can look at perspective one for perspective viewing
    projection let's zoom out a little bit here. So you can see the whole thing
  persid: ''
- desc: it's changed your view a little bit
  persid: ''
- desc: so you can see that we're or we need to increase the Zed to see the whole
    thing or if we decrease that we're going to decrease what we can see
  persid: ''
- desc: can see them all cube
  persid: ''
- desc: I hate a feature on the Mac if I accidentally touch with two fingers that
    like switch between it's like a back button
  persid: ''
- desc: so you decrease our seems to work a little more
  persid: ''
- desc: so here we go from nothing. A little closer there it is the cube a little
    closer still. And then what happens here and they see the blue square instead
    of the Red Square
  persid: ''
- desc: and it's gonna guess we're inside the cube
  persid: ''
- desc: everyone
  persid: ''
- desc: seven comes around
  persid: ''
- desc: there it is again.
  persid: ''
- desc: So we're not looking at the center of the cube anymore
  persid: ''
- desc: that's another issue I want to make this about usability of the program the
    sample code He gives us because sample code is intended to demonstrate the WebGL
    functions.
  persid: ''
- desc: But we should also always think about for assignments for example, and how
    we're going to make the code available for the instructor for the instructor and
    for the marker to look at and to grade and to give the most clear experience of
    what we're trying to demonstrate in the code.
  persid: ''
- desc: Okay, any questions or comments? About that?
  persid: ''
- desc: So, the functions to create the matrices are in that MV new dot j s. So we'll
    look at that on Wednesday as well as discuss exams. Okay, throughout if we leave
    a few minutes early today. We're all finished there and then if there are questions
    or comments we can have a bit of a discussion now.
  persid: ''
- desc: Any questions or comments?
  persid: ''
- desc: For the slides that you provide from chapter one to five, she could cover
    the question
  persid: ''
- desc: Yeah, so what we've discussed in class, chapters one through five are fair
    game.
  persid: ''
- desc: Review, we can can we just study those slides?
  persid: ''
- desc: Sure, but I would say also look at what we've discussed in class. Okay. So,
    I look forward to your input about the kinds of questions that will be a fair
    assessment of what we've done so far. Do you have a question for the whole group?
    No.
  persid: ''
- desc: Does that seem okay? think I'm being too hard on the textbook textbook author
    for his JavaScript and HTML coding.
  persid: ''
- desc: Who says yes, I am too hard on the author who says no, I'm not too hard. Okay,
    so no, who just doesn't want to hear me at all? And participate in these questions?
    Yeah, I figured that
  persid: ''
- desc: wants to leave early. Just still early
  persid: ''
- desc: Okay, thank you for your content, attentive listening. And we'll see you on
    out so I have available tomorrow for office hours if you have questions, and then
    we'll discuss them Wednesday in class and then Thursday and even Friday. Also
    be available to answer questions. Okay. You're very welcome. Have a great day.
    Thanks.
  persid: ''
- desc: Again,
  persid: ''
- desc: Again,
  persid: ''
offering:
  id: CS-733-202330
