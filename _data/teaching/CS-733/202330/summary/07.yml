Audio-Transcript:
- desc: Okay, let's start out then.
  persid: ''
- desc: So any questions or concerns from last day?
  persid: ''
- desc: Feel like this is going to
  persid: ''
- desc: not end well for me the keyboard
  persid: ''
- desc: is
  persid: ''
- desc: stuck at a strange angle over there oh, it's even got a little display on
    it
  persid: ''
- desc: as a sketch
  persid: ''
- desc: take a picture so
  persid: ''
- desc: I can include that
  persid: ''
- desc: so you don't think I'm just making things up
  persid: ''
- desc: how many of you think I'm making things up
  persid: ''
- desc: we just,
  persid: ''
- desc: oh, I was gonna say you, Cynthia You don't think so? But sure, maybe he's
    not even looking up from his phone
  persid: ''
- desc: what is that, like? I'm not sure what.
  persid: ''
- desc: No, it was just it was terrible.
  persid: ''
- desc: So you can adjust the angle of the keyboard. Oh, and it was angled such a
    way that it wouldn't go back into the slot. So now it's all set. And I'm still
    getting an error here so I won't I won't. I'll update the website. afterwards.
  persid: ''
- desc: So who can tell me a little
  persid: ''
- desc: bit of a little bit about a basic WebGL program? What pieces does it have
    or what it? Let's talk about some of the examples we've already looked at what
    pieces do we have for those?
  persid: ''
- desc: Zip canvas to work on. Okay,
  persid: ''
- desc: so let's go a little higher level so what which files do we have
  persid: ''
- desc: so we have an HTML file
  persid: ''
- desc: we have JavaScript.
  persid: ''
- desc: So this is Oh sorry.
  persid: ''
- desc: So in the HTML
  persid: ''
- desc: we were
  persid: ''
- desc: we describe the canvas
  persid: ''
- desc: shaders, right. So, the book describes a way that we can have shaders not
    in the HTML file but putting them in the HTML file is a good way to make sure
    that all was run. So sometimes you might have some security issues if we're trying
    to load files not in the HTML file with a web application so you can review that.
  persid: ''
- desc: So we're describing the structure of the web page in HTML and JavaScript.
  persid: ''
- desc: I don't want to just monopolize the time here. So what else what do we do
    in the JavaScript?
  persid: ''
- desc: We like the algorithm Yeah.
  persid: ''
- desc: Should we make use of?
  persid: ''
- desc: It. To manage data as well. So the basic structure we had is where we're getting
    regenerating data. And we're moving it to the GPU. And then we're describing how
    to eat make use of that data in the GPU.
  persid: ''
- desc: Okay, so does that seem all right?
  persid: ''
- desc: Soon as it's most on the table, and I just feel like I should use it connected
    to my computer so.
  persid: ''
- desc: Okay, so before I get too far into the new stuff, but interaction this has
    a little bit of interaction, but it's also an example using three js to draw this
    or Krinsky triangle.
  persid: ''
- desc: Erricka
  persid: ''
- desc: so this is on the web,
  persid: ''
- desc: but it's acting up a little bit. So it's hard to you might have to use source
    on the file. Check that with you just in a minute. So if we have index dot HTML
    and the main dot JavaScript and we run MPX make more are on francais VT.
  persid: ''
- desc: This used to work more reliably.
  persid: ''
- desc: So this is our serpent's key triangle drawn with a collection of triangles.
    let's redraw it
  persid: ''
- desc: it's too quick
  persid: ''
- desc: have to quick anyway, so we can
  persid: ''
- desc: so we can interact with this a little bit.
  persid: ''
- desc: I can zoom in on a
  persid: ''
- desc: different triangle
  persid: ''
- desc: go to the website here.
  persid: ''
- desc: So I think if we do view source here
  persid: ''
- desc: shouldn't be able to see the fine
  persid: ''
- desc: No, that's it
  persid: ''
- desc: let's see index page. Okay, so I apologize for not figuring this out before.
    Still needs a bit of work but let me go back to.
  persid: ''
- desc: Source code directory
  persid: ''
- desc: so I'm going to copy this
  persid: ''
- desc: so when I read when I published the website today, you'll see the main dot
    HTML file and you can look at the source now
  persid: ''
- desc: it's not very complicated
  persid: ''
- desc: so we have the serpent's key triangle, the title and the heading and then
    we have a heading heading one in the body and then we identify the script happening
    in main.js. So that's where everything is going on
  persid: ''
- desc: I think we can see main.js from the website.
  persid: ''
- desc: xlarge to read
  persid: ''
- desc: I'll do here on my screen
  persid: ''
- desc: so the interactive elements are done with the harvest control orbit controls.
    So that's not part of the
  persid: ''
- desc: main three library.
  persid: ''
- desc: But it's an add on
  persid: ''
- desc: so then we have a prospective camera and we're setting that up
  persid: ''
- desc: to make a new camera because it's position we talked about those coordinates
    already a little bit
  persid: ''
- desc: so here's another place so then we're making a new essence of the orbit controls
    attached to the camera and we connected with the renderer.
  persid: ''
- desc: And then we have
  persid: ''
- desc: Dr. We create the data for the triangle
  persid: ''
- desc: so here they're using spread notation. Have you Are you familiar with that
    with JavaScript? A little bit. Yeah, I'm a little bit familiar too. So I have
    to look it up. Anyway, so we draw a triangle initially so that so if we set it
    up, it'll draw the outside triangle and then we'll call this recursively to draw
    the inside triangles. So the render rendering the scene with a camera and we update
    the controls. So we have one two, and then declaration for the controls
  persid: ''
- desc: the camera dot position dot set 002 in a bit. So is it the initial initial
    position of the respective?
  persid: ''
- desc: Yes, so So remember we talked about when we're lining up a shot. So we have
    the camera in a position and we're and we just say we're looking at so this is
    one to one, one axis of our camera. Coordinate System.
  persid: ''
- desc: So that makes sense. Okay.
  persid: ''
- desc: Anyway, I just wanted to show you that
  persid: ''
- desc: so we're gonna go into more detail about interaction in WebGL but this is
    a way
  persid: ''
- desc: that we can
  persid: ''
- desc: see in three js, we can do a lot of things without getting worried about what's
    under the hood. So to speak. What are the mechanisms involved?
  persid: ''
- desc: So we won't talk
  persid: ''
- desc: about changing the camera position today. Some of the examples we'll deal
    with today are related to finding input or using mouse inputs
  persid: ''
- desc: and buttons and
  persid: ''
- desc: again, different kinds of inputs. Okay.
  persid: ''
- desc: So what I want to do is
  persid: ''
- desc: show you first some
  persid: ''
- desc: examples from the text version
  persid: ''
- desc: so, we'll do the rotating square first.
  persid: ''
- desc: So, this is about
  persid: ''
- desc: animation, right. So, we're going to animate this way to animate geometry.
    So, if you want to go back well, we could actually should we go back and spin
    gasket around from earlier examples done pa helpful thing anyone more enthusiastic
    about
  persid: ''
- desc: Okay, so let's look at this code first.
  persid: ''
- desc: So we see can you see that
  persid: ''
- desc: alright
  persid: ''
- desc: I can only see you
  persid: ''
- desc: alright, so vertex shader so we're doing rotation requires an angle. So we're
    going to change the angle
  persid: ''
- desc: and we're going to compute the sine of the angle and the cosine
  persid: ''
- desc: so we think of drawing
  persid: ''
- desc: drawing a circle, so you can imagine that's a circle please
  persid: ''
- desc: and so the
  persid: ''
- desc: so this is cosine. So this is theta cosine of theta sine of
  persid: ''
- desc: the core coordinate so that's, as you're going through the
  persid: ''
- desc: the angles we were going to use sine and cosine to
  persid: ''
- desc: specify new coordinates
  persid: ''
- desc: so we're getting our position that we've calculated for the so in this case,
    we have a square so that's four coordinates
  persid: ''
- desc: sine and cosine. And then we're going to update the graphics position, multiplying
    sign by the Y and cosine by the x position. The minus sign for the first one and
    the y position gets
  persid: ''
- desc: sine times cosine
  persid: ''
- desc: and they're also flipped here. So cosine times x.
  persid: ''
- desc: So this notation is called Swizzle, I believe. So we can access the elements
    of the vector by
  persid: ''
- desc: by using dot notation, and then we can do some interesting things. We can
    change the order of elements if we if we go x y Zed and then we say Zed y x
  persid: ''
- desc: so is that position is zero and then here we have w. So we talked a little
    I think we talked a little bit of emoji, what genius coordinates if you mentioned
    that, I feel like we did a little bit what how we can represent we can incorporate
    rotation, scaling and translation
  persid: ''
- desc: and the single matrix
  persid: ''
- desc: that we talk about that
  persid: ''
- desc: maybe you mentioned it,
  persid: ''
- desc: okay. So
  persid: ''
- desc: well, so this is to do with more genius. coordinates. So we're going to get
    a point in x, y and Zed.
  persid: ''
- desc: So we all get hung up on it and don't worry about it. If it's not clear.
  persid: ''
- desc: But I just want to explain that so.
  persid: ''
- desc: We have x divided by w find w w.
  persid: ''
- desc: So that's how we get our
  persid: ''
- desc: I'm gonna get her coordinate in 3d.
  persid: ''
- desc: Usually we're going to have w as one. So just a bit of arithmetic doesn't
    come into it
  persid: ''
- desc: anyway, so we're doing the rotation and so we have an input vector. The position
    that we're getting from our, our buffer that will set up in Jad GS file and then
    we have uniform float. So that's the angle
  persid: ''
- desc: so uniform, is because the angle is gonna be constant doesn't change with
    a vertex. So we're just passing a single value to the shader. So now, we're not
    creating a buffer with one angle for every vertex, for example. We're just doing
    one angle for the shader. So we'll see how that goes. And that's why we use uniform.
    So to do that
  persid: ''
- desc: and then
  persid: ''
- desc: in the fragment shader, we're just doing the color. So we're doing color red
    okay.
  persid: ''
- desc: Then rotating square
  persid: ''
- desc: so the JavaScript we're doing
  persid: ''
- desc: so we
  persid: ''
- desc: declare theta as a variable with
  persid: ''
- desc: global scope
  persid: ''
- desc: and set to zero. And then we have a variable that we're going to use in a
    few different places, that's going to be the location of theta in the shader.
    So that's how we're going to make the connection between the JavaScript and the
    shader. Like we do for position Lok, for example. So we set the viewport and clear
    color, set the shaders and then we have vertices 01 minus 1010. And zero minus
    one.
  persid: ''
- desc: So then,
  persid: ''
- desc: for those four vertices, we're going to store them or send them to the GPU.
  persid: ''
- desc: And then, so we're making the associated association between a position and
    the buffer. And then here's the one line we're dealing with the angle
  persid: ''
- desc: so theta Loc,
  persid: ''
- desc: GL get uniform location. So it's a little different than this one, get attribute,
    attribute location.
  persid: ''
- desc: Get uniform location from the program and look for the name u theta.
  persid: ''
- desc: So we make the connection. And then we call the render.
  persid: ''
- desc: And here's the other place where
  persid: ''
- desc: we're using that information. So
  persid: ''
- desc: in the render, we're adding to the angle and then we're sending that very
    resetting that variable
  persid: ''
- desc: in the shader with this connection, using GL uniform one f. So we make that
    connection and change the value and then we're going to draw the array
  persid: ''
- desc: so there are a couple of things here. So on the other one, we saw a render
  persid: ''
- desc: we just drew the arrays. Now we have request animation frame render as well.
  persid: ''
- desc: So that's the idea that we want to make things. We want the animation to be
    smoother. So we're managing the switching of so we're switching the screen when
    the new images ready.
  persid: ''
- desc: So instant screen is like each time rotates.
  persid: ''
- desc: Yeah, so we can use instead of having to redraw the buffer, while it's visible.
    We can redraw it in the background and then switch once it's once it's ready.
    So that's called double buffering.
  persid: ''
- desc: So I just want to mention also a triangle strip here.
  persid: ''
- desc: So
  persid: ''
- desc: we start with 01.
  persid: ''
- desc: And then we go to minus one, zero
  persid: ''
- desc: and then we have 100 minus one
  persid: ''
- desc: so we do
  persid: ''
- desc: do that so we can think of starting with 01. To
  persid: ''
- desc: get back to the that is when we do a triangle strip. We're making a triangle
    with the first three vertices and then only add one more verdict vertex here.
  persid: ''
- desc: Then we're making a triangle out of the
  persid: ''
- desc: three vertices, the next three vertices. So this is a way to make more efficient
    use of the vertex data that we have
  persid: ''
- desc: and that's a square rotated.
  persid: ''
- desc: Not a sailing ship or anything else
  persid: ''
- desc: that makes sense.
  persid: ''
- desc: So we're using this and then we're going to rotate it
  persid: ''
- desc: so let's go back to our.
  persid: ''
- desc: Let's do the to D.
  persid: ''
- desc: Why don't we move into
  persid: ''
- desc: it chapter Three.
  persid: ''
- desc: Okay, so we need
  persid: ''
- desc: we need to update
  persid: ''
- desc: update the shader as well. We'll do that in a second.
  persid: ''
- desc: Okay.
  persid: ''
- desc: So we've added the variable for theta we didn't use we didn't change the draw
    raise command because we have triangles they don't have the triangle strips so
  persid: ''
- desc: we'll take that
  persid: ''
- desc: Okay.
  persid: ''
- desc: That's CMRA so we're doing the code change the position
  persid: ''
- desc: based on the rotation angle
  persid: ''
- desc: think we have all the pieces there. Now
  persid: ''
- desc: I didn't save. file that would have helped
  persid: ''
- desc: I think that may have helped
  persid: ''
- desc: any questions or questions or concerns about that.
  persid: ''
- desc: Can we control the speed of the animation?
  persid: ''
- desc: 'Yes'
  persid: ''
- desc: Now I want to go back and.
  persid: ''
- desc: Excuse me so this has some controls
  persid: ''
- desc: so we can change the direction
  persid: ''
- desc: and we can change the speed as well.
  persid: ''
- desc: So this is a search box with toggle rotation direction the spin faster and
    spin slower. That's a select control and HTML and I am not sure that's being put
    to very good use here.
  persid: ''
- desc: These these are just buttons
  persid: ''
- desc: and we seem to the broken
  persid: ''
- desc: so because we're doing this as part of our HCC program, let's think about
    how to interact
  persid: ''
- desc: with this rotating square
  persid: ''
- desc: so we play maybe we'd like to have an indication of the range of speed possible
  persid: ''
- desc: and if we keep slowing it down, maybe we'd like it to stop. But then if we
    hit the faster button, it should start again. Those things seem reasonable. Anything
    else?
  persid: ''
- desc: Here's the question. So the more we click this spin slower button, the more
    it click gets slow. So if we like it should be the same for the faster right if
    we click spin faster, we cannot like started or you can give up committed defaults.
  persid: ''
- desc: The issue here is there aren't any checks
  persid: ''
- desc: so
  persid: ''
- desc: spin slower we'll get it'll, it'll be a positive number but it'll it'll be
    infinitesimally small if we keep pressing slower and if we keep pressing faster
    we get a huge number
  persid: ''
- desc: so this is their final This is the revised version so they've added a slider
    here
  persid: ''
- desc: so they can
  persid: ''
- desc: make it to be 100% and 0% isn't zero because it's still moving
  persid: ''
- desc: so this is my version of the
  persid: ''
- desc: of the
  persid: ''
- desc: last time we saw
  persid: ''
- desc: so we have three buttons. And we can also use key presses
  persid: ''
- desc: two this is using Bootstrap.
  persid: ''
- desc: So
  persid: ''
- desc: we have the buttons
  persid: ''
- desc: So I have a variable for speed. I said 250
  persid: ''
- desc: And then I'm going to have
  persid: ''
- desc: this is the progress bar or the speedometer. In the textbook version they
    were dividing through by two or multiplying by two with no checks so
  persid: ''
- desc: I
  persid: ''
- desc: created a variable for this factor that we're going to multiply and divide
    by
  persid: ''
- desc: my B we don't we don't want to do that.
  persid: ''
- desc: And we just want to increment. So if we're spinning faster we're increasing
    the speed by one and if we're spinning slower, we decrease it by one
  persid: ''
- desc: I've still
  persid: ''
- desc: I've kept
  persid: ''
- desc: some elements of the original code.
  persid: ''
- desc: So speedometer, I'm getting it using the DOM to find the item with the ID
    in the HTML file.
  persid: ''
- desc: I'm not using
  persid: ''
- desc: a select so I just comment that out for now.
  persid: ''
- desc: So the button that has a direction I'm toggling between true and false.
  persid: ''
- desc: And then the button
  persid: ''
- desc: to which I've given the ID slower. I call a function spin slower
  persid: ''
- desc: faster I do spin faster.
  persid: ''
- desc: Then here we're doing key presses. So press one toggles the direction press
    two at Spin slower press three spins faster.
  persid: ''
- desc: Suspend sore I divide through by the factor. The speed is less than one I
    set speed to zero. And then I update the speedometer. It's been faster speed is
    greater than zero. multiplied by the factor of speed is greater than 100. So to
    be 100.
  persid: ''
- desc: So if it's
  persid: ''
- desc: if it's zero
  persid: ''
- desc: and I said to be one
  persid: ''
- desc: because if it's zero, the multiplication by whatever factors is going to make
    it a different so that's so restart it. Updates phenomenon so
  persid: ''
- desc: I'm updating this style with based on speed so the speed will be a percentage
    between zero and 100.
  persid: ''
- desc: This is an accessibility property for screen readers and so on and this is
    a label so we're getting speed
  persid: ''
- desc: so that's what we see on the progress bar it says speed some percentage.
  persid: ''
- desc: So in the render function, clear the color bit if speed is greater than zero.
  persid: ''
- desc: Changing theta based on
  persid: ''
- desc: a toggle direction so if it's true we're adding point one to theta. And if
    it's false we add negative point one set send that to the vertex shader. Draw
    the triangles strip to triangles. Then we set the timeout function this is the
    way that we're controlling the speed.
  persid: ''
- desc: So we're delaying or setting a delay to request the next frame that's basically
    it. So when speed is 100 the timeout is zero speed is zero then we're not going
    to do anything except drive.
  persid: ''
- desc: Draw the square draw the triangle strips
  persid: ''
- desc: in the current position so we're not updating the angle or anything
  persid: ''
- desc: I've tried to improve the readability and
  persid: ''
- desc: quality of the code in the example
  persid: ''
- desc: does this make sense? Do you have any questions?
  persid: ''
- desc: Moses interesting. today.
  persid: ''
- desc: So who can take on being more talkative in class
  persid: ''
- desc: Shubh
  persid: ''
- desc: anyway, I don't want to belabor the point
  persid: ''
- desc: so we've seen a couple things for animation so we're doing the rotation of
    angle and we have the request animation frame.
  persid: ''
- desc: They will look at the assignment, the first assignment yet. Any questions
    about that? Okay,
  persid: ''
- desc: okay, we're right on time. So thank you very much for today.
  persid: ''
- desc: I'll see you on Wednesday. Have a good day. Take care. Enjoy the nice weather
  persid: ''
- desc: I'll see you on Wednesday. Have a good day. Take care. Enjoy the nice weather
  persid: ''
offering:
  id: CS-733-202330
