cooked:
- desc: Just what we have to do in this class and on what topics do we have to
    write about for the 1st blog?
- desc: ( List of possible topics for Blog Entry 1)
  url: http://www2.cs.uregina.ca/~hepting/teaching/CS-280/202110/#collapse_OFF_TLO
- desc: In our 8th meeting we discussed what is important design for the programmers
    and their users. We talk about the free communications app called Discord as an
    example. Many students alongside me think the discord user interface (UI) is pretty
    intuitive after a while of using it. However some students raised valid concerns
    about other types of users not being able to understand how to use discord due
    to the initial jarring UI and notification spamming.
- desc: "Discord is like cooking, it looks easy but it\u2019s not. The design of Discord\
    \ is pretty overwhelming to the new user. I would say that it doesn\u2019t share\
    \ a lot of similar features to some of the communication apps that I\u2019ve used\
    \ in the past. I think the unfamiliarity throws a lot of people off.\nHowever,\
    \ you can\u2019t expect things to get easier, as a user you should start learning\
    \ new things as well. Newer software has more creative and useful features that\
    \ the old one doesn\u2019t have. So, the transition is a bit tough, I would say,\
    \ just be more open-minded. So the users and the designer have to meet somewhere\
    \ in the middle to get the best experience.\nFor example, social media apps such\
    \ as Reddit, Instagram, Twitter, Facebook, etc. have similar features. So, the\
    \ user can switch from one app to another pretty easier. They have a search bar,\
    \ post/tweet, sharing options, groups, swipe, infinite scrolling, notifications,\
    \ and direct messaging. As a designer, you want to make something that is full\
    \ of new features yet also familiar to currently existing apps."
- desc: 'Concerning the meeting today, I think it''s very interesting to think about
    how sometimes we sacrifice a lot of ease of use, accessibility, or intuitiveness
    of design in the name of utility. I was thinking more on that concept that Don
    Norman was talking about in terms of design that makes users happy, and it struck
    me that I use a lot of things that I don''t really enjoy simply because it makes
    things easier or overcomes some type of issue. I don''t like Facebook but I use
    it to keep in touch with people. I don''t like Google products but I use some
    of them because it''s convenient. I don''t like Zoom but I use it for my classes.
    None of these products ''spark joy'' for me but I use them because it makes my
    life easier.


    So it got me thinking, I''d definitely like to learn a bit more about intuitive,
    joyful, accessible design and what it is that keeps us from employing it everywhere
    (or maybe we are and I''m just grumpy, haha). If we don''t employ it, is it just
    because it''s too expensive, and the bottom line gets in the way? Is there more
    research that needs to be done on it? What is it about some products that makes
    them more desirable or more commonly used? Is it innovation and design or is it
    just marketing?


    Anyway, I ended up in a bit of a rabbit hole looking up intuitive and/or accessible
    design after class today. I thought this was interesting and relevant to some
    degree: http://universaldesign.ie/What-is-Universal-Design/The-7-Principles/'
- desc: "Ease-of-Use and Accessibility\n\nWhen designing software, as we\u2019ve discussed\
    \ in class, we want to design our software with \u2018the greater good\u2019 in\
    \ mind. Accessibility and ease of use are a very important part of designing technology\
    \ for the greater good. For me, this means knowing who your target audience is\
    \ and their level of technical knowledge. For example, if you had very tech-savvy\
    \ people as your main customer base for your software, you could possibly make\
    \ your software more complex if needed. However, if you have a target customer\
    \ base that has limited experience using technology, you may want to make your\
    \ software more simple to use.\n\nAccessibility vs Utility\n\nWhen software has\
    \ more utility, it is often more complicated to use. Finding the right balance\
    \ between accessibility and utility for your target user base can be very important.\
    \ An interesting example of this that we talked about in class is the online communication\
    \ platform, Discord. Discord is very interesting because it was originally designed\
    \ for a very tech-savvy user base: people who played computer games. With that\
    \ in mind, in order to include lots of extra features that added to its utility,\
    \ the developers of Discord designed their program to be more complex. It was\
    \ built with such complexity that there was a learning curve to use the program,\
    \ even for it\u2019s own targeted, tech-savvy user base. Since the COVID-19 pandemic\
    \ hit, however, this user base has expanded greatly: Discord is no longer only\
    \ used by people playing computer games, as more people have been required to\
    \ flock to online communication for work, school, and socializing. Discord\u2019\
    s steep learning curve is even more apparent than before, as it was designed for\
    \ a different, more tech-savvy user base, not for a person with an average amount\
    \ of technical knowledge. People still use Discord for its high utility however,\
    \ even with all of its ease-of-use issues and steep learning curve. With this\
    \ in mind, I want to bring up this question for you to consider: What is the right\
    \ balance between ease of use and utility?\n\nLet me know what you think, Thanks\
    \ for reading!\n\nDavid Galgan"
- desc: "vyomesh\n\n\_\n\nThe meeting started with discussion of intuitiveness. I\
    \ learned many things about the fact that it depends upon the person if they feel\
    \ it good then they should be using the following applications. Intuitiveness\
    \ is more a common for the following instincts more than the conscious ideology.\
    \ For example, some of the app likely discord has its own convenience and platform\
    \ for publishment. We also talked about the empathy which makes me to learn different\
    \ thing about the understanding of others perspective the following difference\
    \ in the ideology. Empathic computing is the study which deals with the narrowed\
    \ down to understand the \u2018low-level\u2019 subconscious feelings, such as\
    \ pain, illness, depression or anomaly in the field of computer science.\n\n"
- desc: I am getting the idea that some apps can be classified as tools in the sense
    that they are designed to be multi-purpose for the user. We were discussing how
    the audience for discord changed from gamers to a general audience, but Discord
    itself never had to change to be appealing to the general audience. People just
    used the tool that is discord for their own purpose. Discord does not get to decide
    in this situation what it is to be used for. This is actually something that is
    decided by the users.
- desc: 'Discord Accessibility and Who''s Responsible

    In our recent discussion about discord and how intuitive (or not intuitive) the
    program is sparked an interesting discussion about how accessible one should make
    their software. Accessibility is something very difficult for me to understand
    because ultimately, who is responsible for accessibility? I personally don''t
    know. Is it discord''s responsibility to make their program as accessible as possible?
    If it is, wouldn''t that limit there creative decisions and limit their freedom
    on what they can implement (if they are always forced to make things accessible
    then difficult but useful functions may never be implemented). Additionally, making
    things accessible is not free. It costs discord time, money, and other resources
    to make these changes. Why should they have to bear the entire burden of accessibility
    when we can just learn how to use it? Then is it our responsibility? Do we just
    have to sit down and learn the software because we chose to download it and use
    it? Well, we do lots of things for the sake of accessibility. We include wheelchair
    ramps that less than 1% of the population will use, special bathrooms for people
    with disability, among other things. Most people will not find these accessible
    changes to be useful but for the sake of accessibility (and for somethings it
    is the law) we implement these things for the betterment of those who need the
    extra help (we often don''t ignore those who need that extra bit of help so putting
    the entire burden on the an individual also seems a little irresponsible). I guess
    with everything there needs to be a balance. Is discord entirely responsible to
    make everything so accessible everyone can easily understand everything? Probably
    not. But are you entirely responsible to sit down and learn the ins and outs of
    discord because you chose to use the software? Probably not. A balance of the
    two are key. Of course, this is just with discord. Other software will probably
    need there own analysis and conclusion.'
- desc: we discussed the interface of applications- designers should make their user
    interface user friendly and learn to adjust with time so as not to bore users.
    They should also try to make the interface less complicated because the easier
    it is, the more time people want to spend on it.
- desc: I wouldn't say that any technology is intuitive. People will design things
    that are intuitive to only themselves, one persons obvious isn't another persons
    obvious. I did not like mac's one click "ease of use" mouse, I found it very confusing
    and annoying. This is because I first started using a PC over a Mac. A lot of
    our intuition comes from experiences, if you use a new software that is similar
    to other software it will seem intuitive. That being said though I do think that
    touch screen stuff is generally more intuitive because you just have to touch
    stuff. Touching something on a touch screen will do something and I think it be
    easier find what your supposed to do.
- desc: it was really helpful
- desc: In my opinion i will say mac's one click is very helpful than the windows
    because sometimes the touch screen and light touch on mouse pad are sometimes
    the problem if you are trying to do something and it get started by light touch
    and about the application interfaces that should be user friendly as you can see
    the Microsoft word, Excel. They give you space for typing and also add feedback
    on your computer screen.
- desc: 'Well i found it very interesting on how some people where defeneding there
    perferend interface during the meeting when there is ligemently critizem from
    them. It was extremlly interesting with talking about the interface and really
    thinking about it

    on what they should do'
- desc: I believe that the UI of a software plays a critical role in determining the
    user-experience. As discussed in class, I agree with the statement that Discord
    does not have a very good UI. However, its still a pretty useful tool with a plethora
    of features. This is one reason why I appreciate the iOS a lot - it has a minimalistic
    feel yet has a ton of features in it, everything is easy to navigate to/from.
- desc: I thought this meeting's discussions were very productive with a lot of really
    good points mentioned. I think the most important thing is really to know your
    target audience, and be completely willing to meet them where they are and able
    to accommodate them in any way necessary while still retaining the functionality
    of your products. One thing I remember being taught is it's important to be able
    to trace your websites/applications and see exactly how many clicks it takes to
    get to a given place. Labelling is incredibly important, but one thing I see becoming
    more and more common is just way too many options and different drop downs, buttons,
    and settings to play around with. I think applications are now trying to compete
    too much with one another, and adding more features than they really ever needed
    to try to make people as satisfied as possible. I don't think this is inherently
    a bad thing, but it's very important to remember that it's not possible to just
    keep packing more and more features into a platform without looking back at the
    base system and really seeing what needs to change for it to contain a larger
    scale of services.
last_ts_read: '1612766454'
offering:
  id: CS-280-202110
raw:
