Audio-Transcript:
- desc: Somebody says I was so I brought the cards I promise your confirmation
  persid: ''
- desc: I depending on the work that I started to work for you
  persid: ''
- desc: thanks for joining us we cannot wish Laura Happy birthday she remember the
    bra the balloon Okay, so So I promised these cards the QR codes in the back so
    surely sorry Laura and
  persid: ''
- desc: economics between zero and
  persid: ''
- desc: and don't tell I'm going to Iceland for us depending on our guests you're
    not too far away because your number on this card the number on this card
  persid: ''
- desc: yes okay is your number on this card as your number in this card numbers 11
    So yeah not a numbers that are written back but there's actual secret information
    and the QR codes it's not I'm trying to joke anyway so just
  persid: ''
- desc: so there's no
  persid: ''
- desc: no tracks here. So there's a number two on the back. But it's also the numbers
    in the top right
  persid: ''
- desc: or my other right, top left the four card for the top left and the one card
    as we've learned the top left and then the eighth card the date at the top left
    so
  persid: ''
- desc: I'm gonna try another one. Because I picked that up other days the number
    of lines between zero and 15 Is your number and this number in this card number
    on this card this card yeah you want to talk about it or do you want to do another
    one
  persid: ''
- desc: should we Okay, sure.
  persid: ''
- desc: So you have more cards? Yes. And what's the total amount?
  persid: ''
- desc: I'm asking you to guess and pick a number between
  persid: ''
- desc: zero and 1516 guesses in two to the power of eight and 16. So what I'm thinking
    is that there are four cards with a combination of zeros and ones and if it's
    not on the side, that's a zero if it is on the card. It's a one and then you just
    translate the zeros and ones into a number.
  persid: ''
- desc: I feel like we just make you stand up there and try to I don't know what
  persid: ''
- desc: your response
  persid: ''
- desc: is guess about how the
  persid: ''
- desc: process is working. Everything is binary. So
  persid: ''
- desc: that's basically it. It's to the forest is 16. And so So I'm asking you for
    yes or no questions. So
  persid: ''
- desc: those are like
  persid: ''
- desc: binary number binary digit spits. So when you say no, we're recording a zero
    or you're telling me a zero in that place and if you say yes, that's a one. So
    what's involved let's see if I say
  persid: ''
- desc: so I have
  persid: ''
- desc: if I say yes to these cards what's my number? Yeah. So the algorithm is simple.
    Start start with zero Evening Right. Trying a little bit different way to explain
    it. Does that make sense? So
  persid: ''
- desc: the gist of what's going on is I'm asking you to tell me your number in binary.
    And then based on your yes or no answers. I convert it back to decimal. So just
    for fun, straight up the first verse 16 numbers in binary
  persid: ''
- desc: so we started out with no so the next
  persid: ''
- desc: one up is so it let's say you say yes to the one card
  persid: ''
- desc: we know it's an odd number.
  persid: ''
- desc: Yeah. So,
  persid: ''
- desc: q is written as 10010 so this is the origin of the joke are 10 kinds of people
    in the world those who understand binary and those who don't.
  persid: ''
- desc: Okay so we notice
  persid: ''
- desc: the pattern is repeating the pattern yours. No, yes, no. Yes. And then we
    have no no yes, yes. So what what are the next four numbers going to be like?
    Yes, yes, yes, yes. Yes, and these are going to be yes.
  persid: ''
- desc: And then we just copy the pattern we haven't been here yet. So these are going
    to be no
  persid: ''
- desc: so 0100 or 24010167? And then for the last cards and these are all going to
    be are going to say yes to the number being on the eighth card so we can see so
    what are the numbers that are on the card are the ones we're saying? Yes. So 1357
    So we did we did zero to seven. So that's the first column on the card. And then
    for the two card. We've said yes to two three, and six and seven. So that's the
    first column on the food card.
  persid: ''
- desc: And then
  persid: ''
- desc: the fourth card we have 4567 and that appears in the first column and then
    the eighth card we just kind of every the numbers are hated about so I still have
    a few of these in my office.
  persid: ''
- desc: Come and see me pick up
  persid: ''
- desc: to can entertain your friends and family of thanksgiving. That makes sense.
    So how many cards do we need? Or how many beds do we need to encode characters
    am persistent,
  persid: ''
- desc: is that a 32? Generally for ASCII ASCII stupidities,
  persid: ''
- desc: is it log
  persid: ''
- desc: okay so yeah,
  persid: ''
- desc: most of you are for last season. So, do you need that? How many weeks do we
    need for scanning accordingly for how many weeks to get the data
  persid: ''
- desc: I'm not really talking about QR codes is the answer. You're looking for. 30
    twos in general
  persid: ''
- desc: it's not it's not it's not that's anyway
  persid: ''
- desc: so QR codes have some redundancy. So we can verify we can get the same answer
    a few different ways to assure that we're reading correctly. But I'm just talking
    about so four cards, four beds, four binary bits, we can store 1516 values. Start
    with zero and go up to 53. We ended up with four zeros to start with and then
    we had four ones. So we can if we have space for four bits and we can store 16
    different values.
  persid: ''
- desc: It can be the first 60 letters of the English alphabet or something else but
    because only part of the alphabet isn't necessarily so useful for writing, emails
    and so on. Maybe we should be able to encode more characters.
  persid: ''
- desc: So if we have
  persid: ''
- desc: so in five bits we can encode 32. So it's like decimal numbers, except by
    numbers were doubling instead of multiplying by 10 with each added bit so five
    bits we could encode 32 values 664 So we can probably do a pretty good job with
    64 bits for North American English without an accent and so on. And actually,
    he asked he Saturdays is seven minutes so it leaves one for error checking but
    in order to get some more capabilities within the ASCII system standards use a
    specified different. So we have a Sam 128 from ASCII, and then we have
  persid: ''
- desc: another set of characters setbacks and so forth. And the issue is we have
    to choose which additional set of accent. So characters you want to include. So
    there's lots of different variations
  persid: ''
- desc: using eight bits. And they're different, incompatible they're compatible on
    the 1.8 but then extra 128 match up to adult we don't agree and you got some strange
    characters like box we can question mark or some strange combination of letters
    the adult look out of place I mean they look like through letters but
  persid: ''
- desc: anyway so the ASCII character set is, is quite nice, I think because it's
    designed so you
  persid: ''
- desc: can shift you can go from lowercase, uppercase. By shifting bets. And the
    numbers are for anyone who saw some nice features. And there are some characters
    in there that are TTY codes that I think are never are no longer practically used.
    So ASCII stands for the American Standard Code for Information Interchange. And
    so fun fact you can use it Artis Well, certain kinds of parties maybe if you're
    going to an event, celebrate texting day, us so last week, Monday
  persid: ''
- desc: then that's the kind of stuff you would help you out. So,
  persid: ''
- desc: in order to be more inclusive, we have the idea of Unicode now which is four
    bytes, four bytes or 32 bits. There are
  persid: ''
- desc: different ways to encode them. So we can encode them
  persid: ''
- desc: using two bytes. And this is what's done on Windows. So it's either on big
    that will suit you best divide them into planes and the basic multilingual plane
    gets two bites. haven't forgotten interfaces design course. I'm trying to bring
    us around that point. So this is two bytes. So two times I guess the 16 and then
    there are
  persid: ''
- desc: I'm not sure if I'm using these terms exactly the way you know. So the ones
    that are done. So what's the basic claim then we and somebody we use another so
    if UTF eight, we can we're always going to use 16 bytes and minimum. Maybe sometimes
    we're using 32 to encode characters. So was that? Not so eloquent introduction
    what characteristics do you think UTF eight has. So it's not about the languages
    it's about different encoding characters, different characters.
  persid: ''
- desc: accented characters.
  persid: ''
- desc: So the characters are in Unicode. So they're always have they're defined with
    using 32 bits. These are different ways to represent the Unicode called code points
    in a more efficient manner. So in UTF, 16, we're going to use 16 or 32 bits to
    encode characters. So if we can use 16 bits then we're saving reducing our space
    for the document by half. Yes, UTF eight or using eight bits isn't this basic?
  persid: ''
- desc: And I think it goes up to five bytes.
  persid: ''
- desc: So if UTF 16 is confusing
  persid: ''
- desc: I don't want to put that up. I don't want to make you think that UTF 16 Isn't
    isn't a valuable tool
  persid: ''
- desc: but I think UTF eight is a little bit more clear. Especially if we're learning
    with ASCII. So meeting zero us.
  persid: ''
- desc: So, the thing that I have not stated
  persid: ''
- desc: explicitly here is the Unicode is set up so that the first 128 values match
    up with the ASCII character set. So when we're dealing with North American English,
    and we have web pages that are encoded in UTF eight then we're able to mostly
  persid: ''
- desc: use one byte per character. So that makes sense. So we had one byte it gives
    you this zeros and they're seven bits to fill in two banks I have to look up what
    the first bite looks like. So there's
  persid: ''
- desc: think there are I think it's 40 minutes, late in the first night. And then
    and then betrayed then the next day as it started with 01 to indicate that it's
    there one zero.
  persid: ''
- desc: It's 95.
  persid: ''
- desc: So we can start with 11 by bits.
  persid: ''
- desc: Those who buy
  persid: ''
- desc: zoom you can store up to 21 bits of data
  persid: ''
- desc: in in five bytes.
  persid: ''
- desc: So that gives us a lot of expressive power. So in the UTF eight we could
  persid: ''
- desc: you could encode more characters. But it's by agreement, it's limited. It's
    set to represent the same characters are representable using UTF 16. And there's
    still millions of characters left that are unsigned so you should be okay with
    those. Okay,
  persid: ''
- desc: so here's where I'm gonna venture into the interface design portion. It's
    my intent anyway. So the question is a question is. So there's a story on the
    Nash national news boss you could leave before about how First Nations woman was
    trying to get her kids names spelled properly on their government documents and
    the character that was missing was a glottal stop. So that's certainly available
    within Unicode. But how do we get. So it's it's a question of design and it's
    also a question of storage as well.
  persid: ''
- desc: So for the most part, if if we use UTF, eight encoded
  persid: ''
- desc: names, most of the time we're going to end up with the same they're going
    to be the same size as zeros original ASCII, but at times you're going to be larger.
    So the other thing, the example that came up came to mind for me was talking about
    people were allowed to indicate X for agender on a on an identification so that
    seems to me to be also a question of storage. So if we have one bid allocated
    for gender then we have two choices.
  persid: ''
- desc: So how difficult is it to
  persid: ''
- desc: earn an extra bed in that field?
  persid: ''
- desc: So the joke is there are 10 kinds of people.
  persid: ''
- desc: Those who understand binary and those who don't really even make a joke work
    we're using. We're using qubits. So we can actually store four different values.
    So any comments or questions about that? This anatra changing the database so
    that we add more bits are there other issues that are involved?
  persid: ''
- desc: Is it one a few tips concerns tip not just us. It's the use of bits efficiently
  persid: ''
- desc: Yeah, okay, so. I invite you to check my
  persid: ''
- desc: expansion of this abbreviation. He was definitely Unicode. key I think is
    transformation and F is format.
  persid: ''
- desc: Code transformation format is correct.
  persid: ''
- desc: They say transformation or they say transfer anyway.
  persid: ''
- desc: The transformation
  persid: ''
- desc: I have a worksheet
  persid: ''
- desc: for UTF eight characters I'll share that with you if you're interested. So,
    yes, we're the goal is we can have a very variable PID encoding
  persid: ''
- desc: or variable by. So, ASCII is a popular format and so it's preserved. So that's
    another nice feature. But we're dealing at the byte level so we can we can be
    more efficient than at the byte level.
  persid: ''
- desc: I think maybe we could be.
  persid: ''
- desc: We divided the 128 characters and ASCII into groups of 64
  persid: ''
- desc: Because there's 26 letters,
  persid: ''
- desc: so we shouldn't be able to do a fair job with
  persid: ''
- desc: that. But anyway,
  persid: ''
- desc: there's a lot of there's trade offs there. One sided was the unit size to
    use. And this one seems to be
  persid: ''
- desc: a good trade off I think. So
  persid: ''
- desc: trying to be efficient with UTF, eight, and even with UTF 16. Not as quite
    as it's it's going to be twice as large for an English encoding of English next
    North American English text. So that makes sense. So many people are explicitly
    using UTF eight and when you do web pages Okay. Few people sounds good. Any thoughts
    about sort of the real life implications of limiting the bits that we're storing?
    To discourage? Well, not maybe not. Intentionally discouraged, but limiting diversity
    in the options we can represent. Okay, good time stop for the day. Well, there
    we go. Yes. Thank you very much for today. Have a good long weekend. Happy Thanksgiving.
    Happy birthday, Laura.
  persid: ''
- desc: trying to be efficient with UTF, eight, and even with UTF 16. Not as quite
    as it's it's going to be twice as large for an English encoding of English next
    North American English text. So that makes sense. So many people are explicitly
    using UTF eight and when you do web pages Okay. Few people sounds good. Any thoughts
    about sort of the real life implications of limiting the bits that we're storing?
    To discourage? Well, not maybe not. Intentionally discouraged, but limiting diversity
    in the options we can represent. Okay, good time stop for the day. Well, there
    we go. Yes. Thank you very much for today. Have a good long weekend. Happy Thanksgiving.
    Happy birthday, Laura.
  persid: ''
offering:
  id: CS-428_828-202230
