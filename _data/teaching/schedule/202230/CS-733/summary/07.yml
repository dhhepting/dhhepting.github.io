Audio-Transcript:
- desc: Okay so we have
  persid: ''
- desc: the lock screen
  persid: ''
- desc: that's interesting like black or a shade of grey and I haven't seen that they
    don't usually fail like this
  persid: ''
- desc: midterm. Assignment 22
  persid: ''
- desc: Always so
  persid: ''
- desc: do you think I should have a question about what is a gasket on the exam
  persid: ''
- desc: yeah
  persid: ''
- desc: all right we should discuss some exam questions now that nobody's here verify
    this write this down you're good
  persid: ''
- desc: It wasn't whatever he like even subject and under Mongolia which has which
    comes with a fixed salary sort of momentum
  persid: ''
- desc: since the good
  persid: ''
- desc: girl done that now
  persid: ''
- desc: is a very good discussion that we have.
  persid: ''
- desc: Okay, so
  persid: ''
- desc: I've tried to rehearse a bit more between last day and today. So I'm going
    to focus on three exam three code examples, and then we'll try and apply them
    to do some more things in the assignment.
  persid: ''
- desc: Right, so one way to generate the set of points. And we can use an algorithm
    that has been historically called the chaos game. So we're going to pick transformations
    at random and generate apply apply these transformations to a starting point and
    generate a a bunch of points that together will approximate the shape.
  persid: ''
- desc: Okay
  persid: ''
- desc: so right, you're wondering about the secret discussion about exam questions,
    aren't you?
  persid: ''
- desc: I missed that. So, which kind of questions you're going to have was
  persid: ''
- desc: a sense a secret.
  persid: ''
- desc: So that is the black box of that
  persid: ''
- desc: it happened between between 1130 and 1132. That was, anyway,
  persid: ''
- desc: so I had a question like, this subject is very similar CS 730. Because that
    was quite easy. I'm not sure about the final exam, but somehow, most of us score
    9597 in that subject. But I'm
  persid: ''
- desc: curious, most of you.
  persid: ''
- desc: Anyway. Yeah, the people you didn't do badly. But not every guy to 95
  persid: ''
- desc: I use was 97.
  persid: ''
- desc: I don't know, I don't have that vibration, I
  persid: ''
- desc: don't remember my results.
  persid: ''
- desc: Okay. So,
  persid: ''
- desc: bring that up, You mean I should make it so that you get lower marks in this
    class.
  persid: ''
- desc: So in this playing the method you provided in that final exam, the way it
    is for final exam is 40%. It is that can be proved as a curse for us if somebody
    is not good in final exams, minute was when they will lose a lot of money.
  persid: ''
- desc: Yeah, so I say
  persid: ''
- desc: I'm not trying to fail anybody. But
  persid: ''
- desc: I know that's
  persid: ''
- desc: because I have a lot of anxiety but exams, nice when they say that's all right.
  persid: ''
- desc: So I don't want to say that final exam will be so easy, you don't have to
    stay for it. Because that's not true. But it's not going to be so difficult that
    the time you spend in class will be of no value to you, you have to understand
    intricacies that are not even that are not discussed in the textbook or you have
    anyway. So what? So it's similar to 730, in the sense that you'll be tested on
    things that we do in class. And I don't know. Does that answer your question?
  persid: ''
- desc: That was that was more theoretical. This one is more technically labor and
    like my type of subject, so I'm quite comfortable in this kind of subject. But
    if in final exam series will be more than it would be tougher for me as well.
    I don't want to read so much. If you're asking about any program or something
    there's
  persid: ''
- desc: so in the exams will
  persid: ''
- desc: encourage your input on to what kinds of questions are going to be fair assessments
    of learning over the semester?
  persid: ''
- desc: like I did before, I mean, I asked you for some, what do you think? What are
    these? What kinds of questions would be good? Good assessments of your learning
    over the semester. So we'll do the same thing here.
  persid: ''
- desc: When the question I was denying it was the third question, you're giving the
    final exam for okay.
  persid: ''
- desc: So just put that out of your mind. And this is a new semester.
  persid: ''
- desc: And we'll
  persid: ''
- desc: see. I mean, now that you should forget about 730.
  persid: ''
- desc: But don't worry.
  persid: ''
- desc: I'm not sure how to answer your question. So that you're, you're put at ease
    about the exam. So I mean, it's not going to
  persid: ''
- desc: Okay, so
  persid: ''
- desc: there is a question about using Python with WebGL. So I've looked at that
    a little bit. That's what that page is here on the floor. On the screen Pardon
    me so I'm asking I'm asking for HTML files and JavaScript files like we've been
    looking at but it's always interesting to look at other ways to find to find connections
    between things you've been working on so people have Python is a popular language
    and so it has lots of bindings to different things and so
  persid: ''
- desc: on don't want to discourage you from not but I don't think it'll be an easy
    I think it'll be easier to just write an HTML and JavaScript right me once the
    question I was just
  persid: ''
- desc: asking something not elected with this
  persid: ''
- desc: okay
  persid: ''
- desc: so this works on my Mac, but it doesn't work on these on the browser here
    I'll keep working on that. For anyone who wants to contribute a solution I have
    an idea about
  persid: ''
- desc: somewhere you have used double dollar sign or something in the script sometimes
  persid: ''
- desc: I'm thinking because it's if I put it in a strict directive that might help
    it.
  persid: ''
- desc: So I'll work on that
  persid: ''
- desc: Okay so
  persid: ''
- desc: here's the contract you arrive putting samples from the textbook and to avoid
    and I was just thinking about this afterwards I'm going to change the structure
    a little bit so I'll copy and the contents of the directory of the code directory
    I'll change the structure a little bit so
  persid: ''
- desc: it'll look more like this so have
  persid: ''
- desc: the different chapters in the common area so if you want to download the code
    as a file here's a link to that as well
  persid: ''
- desc: okay, so here's
  persid: ''
- desc: number immersion of the code from the gasket one program on the on the courses
    website All right,
  persid: ''
- desc: so this is
  persid: ''
- desc: super we have our fragment shader and our vertex shader in the HTML file and
    the issue I had with point size last day is I was I made an assignment JavaScript
    file instead of in the shader. So this variable GL underscore point size is used
    by WebGL. And it's available in the shader so let's make the point size bit bigger
  persid: ''
- desc: now let's look at the
  persid: ''
- desc: the JavaScript file so that the person who left their code here on Tuesday
    find it again.
  persid: ''
- desc: You see the Knowledge Center is not here.
  persid: ''
- desc: It's not here either.
  persid: ''
- desc: It was a day on Yeah. All right. So
  persid: ''
- desc: let's make a smaller number of points. Let's say let's do should you tend
    to start with I think knowing that it's out there
  persid: ''
- desc: excuse me
  persid: ''
- desc: Okay, so I made, this is a change I made the other day. Instead of finding,
    choosing another starting point different from the vertices that were specified
    I'm using the first vertex as a starting point because I know that the vertex
    is part of the shape. So I'm not not waiting for it to settle down into the shape.
    But we'll start with a point on the shape system easier
  persid: ''
- desc: way to start
  persid: ''
- desc: so that they start with
  persid: ''
- desc: so we had the vertices separate.
  persid: ''
- desc: And then we have an array of points that were
  persid: ''
- desc: pushing using push to put the points alliteration using
  persid: ''
- desc: crushed to put the points into the sorry
  persid: ''
- desc: I thought it might sound funnier when I said it out loud. So we're creating
    an array here. So we so we're pushing this first point vertex zero. And then we're
    computing the new vertices. New points, pardon me.
  persid: ''
- desc: So we're
  persid: ''
- desc: using the
  persid: ''
- desc: so whatever number of positions you want to create is set up here, is used
    here. So we're doing a for loop from i equals zero to
  persid: ''
- desc: the number of positions
  persid: ''
- desc: reusing J to get an index into the vertices array.
  persid: ''
- desc: So we're
  persid: ''
- desc: creating a new position based on the old one. And we're moving towards the
    vertex that's selected with the index j.
  persid: ''
- desc: And then we're multiple
  persid: ''
- desc: we're scaling by multiplying by point five to
  persid: ''
- desc: take the midpoint between the vertex and the and the position that we just
    added. And then we push them push the light on, so we're getting a series of points.
    into this JavaScript array so it's not where it should go if you remember, we
    talked about that your belief floating point standard is the only thing that can
    be used to. That's the only type that we can put into the buffers on the GPU.
    So then the JavaScript array in general, the one that supports the push operations
    as a, as a lot of extra information in it, so we had this flatten function to
    turn it into an array of floating point numbers.
  persid: ''
- desc: So what we're doing, we're setting up the buffer like that. And then we're
    associating shader variables with the data. So we're using
  persid: ''
- desc: position we're getting a new variable position lock to connect with a position
    in the shader. And then we're saying that that position information is there are
    two fluids for every position. And then we enable the vertex array attribute positional
    arcs or make that connection and then we call the render function and we're drawing
    points to begin with here
  persid: ''
- desc: so how many points did we say
  persid: ''
- desc: 1000 Okay, let's see what that looks like first. So Thanos is isn't bad sweetly
    can So what happens if we treat those pirates those points or not not as points
    but what if we consider the data where we're trying or descending? We're interpreting
    the data we've sent that notice for vertex buffer what have you do it as triangles
    instead? Maybe that's better to do with fewer points.
  persid: ''
- desc: case so, see that
  persid: ''
- desc: we have the same data just interpreted differently. So how many points do
    we need to draw
  persid: ''
- desc: because change the point size back to one
  persid: ''
- desc: make sure that I let's return to drawing clients and set up triangles then
    we get a fairly well defined shape but it's not it's not uniform and it's not
    uniformly covered because we're during the points are random so this is the chaos
    game approach gasket two
  persid: ''
- desc: is an example with some dividing triangles
  persid: ''
- desc: get your coat the other day and yes actually came back and you couldn't find
    it because I moved it up yeah
  persid: ''
- desc: yeah okay
  persid: ''
- desc: don't think we have to do anything here we're not doing we're gonna draw triangles
    not playing so you don't have to line size for example
  persid: ''
- desc: okay, so I have the same three vertices that start with minus one minus 101
    and one minus one
  persid: ''
- desc: and we set up the GL the shaders use the program and so we're having with
    vertex buffer here and then associate the variables as we did before.
  persid: ''
- desc: So the differences here we have this divide triangle function so we pass it
    the three vertices to begin with and the number of times to subdivide. So the
    triangles are a bit bigger than they need to be for screen resolution. So what
    if we doubled it? So you need to subdivide 10 times. Seems to me that looks a
    little more impressive than the rounds to make generated one Now is that the right
    number of triangles to generate how so asked you the other day how do we figure
    out what size we need
  persid: ''
- desc: for how many levels do we need to generate
  persid: ''
- desc: start with the whiteboard
  persid: ''
- desc: so let's say we have I think this is this is our second to Canvas
  persid: ''
- desc: actually we should
  persid: ''
- desc: since forgotten
  persid: ''
- desc: we include the minus one, we include the endpoints, so that's why the square
    brackets
  persid: ''
- desc: are minus one, one minus one one we'll go see.
  persid: ''
- desc: Yeah, so we're going to do the same.
  persid: ''
- desc: So here's the origin
  persid: ''
- desc: and then we go from minus one to one
  persid: ''
- desc: minus one to one
  persid: ''
- desc: so just pretend that I've drawn for that I. These four pieces are also squares.
    So the question is, how many? What's the smallest triangle I need to generate?
    What's the size of triangle that's going to not be too too big. It's not too big
    or too small
  persid: ''
- desc: for that display
  persid: ''
- desc: so what's the size of
  persid: ''
- desc: the coordinates of the world that I'm looking at? So he said the view Canvas
    is 512 by 512. So we have then we have a call to do the viewport which is zero
    which is anyway, let's stick with Canvas. So you set up is 512 by 512. What court
    would really accordance are we? So what's the dimension here? Does that seem seem
    right okay so then we're gonna say two divided by 512
  persid: ''
- desc: is about
  persid: ''
- desc: right so we want to generate triangles with the size determined by this so
    we start out with the triangles size of two and then in this triangle is
  persid: ''
- desc: one and then
  persid: ''
- desc: this triangle is point five so this is our initial This is our starting size
    and then we're shrinking by one half each time
  persid: ''
- desc: so, when this
  persid: ''
- desc: value of n bits equal to this or
  persid: ''
- desc: not art so, this is
  persid: ''
- desc: this is the precision that we're looking for. So, when the size of the triangle
    is about point 004 Does that make sense so what if we make some changes to the
    cornets the starting coordinates here what's gonna happen once you predict with
    that change so this vertex was originally zero and one. So this is minus one minus
    one over here. This is one minus one over here and this one is zero and one. So,
    now I'm changing that coordinate where am I changing it to?
  persid: ''
- desc: Guess So make sense dialing it's a little bit it's
  persid: ''
- desc: inaction it's it's
  persid: ''
- desc: it's got places to go so what if we change this
  persid: ''
- desc: something else
  persid: ''
- desc: so what's gonna happen now
  persid: ''
- desc: we'll go more in
  persid: ''
- desc: here so what happened to the other part of the triangle so we can our prediction
    was correct and we thought the triangle is going to be over here somewhere
  persid: ''
- desc: under snort flooding and site five present to five and most so yeah fix that
    kind of mistakes
  persid: ''
- desc: so it's it's
  persid: ''
- desc: we need
  persid: ''
- desc: to make sure that the object is inside minus one minus one minus one to one
    into the into this cube
  persid: ''
- desc: so the coordinates that are inside so these are clipping coordinates so if
    we have a larger object we don't have to specify everything in terms of minus
    one to minus one what we're going to do is make it do a transformation. So, we
    have said you have a pipeline where we can apply a transformation to the model
    do we have in our world coordinates so that what we want to see ends up in these
    coordinates between minus one and one and then those get rasterized is displayed
    for
  persid: ''
- desc: us
  persid: ''
- desc: does that make sense?
  persid: ''
- desc: So we'll talk about
  persid: ''
- desc: particular transformations we can apply in your mother over the semester
  persid: ''
- desc: so let's restart this
  persid: ''
- desc: so the divide triangles so it starts with these three vertices. And then what
    we'll do is so we're dividing given the three vertices and the count. So we start
    with In this case, we're starting with 10. And afraid zero, then we're going to
    say, make that into a triangle. So we're creating. So what that does is puts the
    vertices
  persid: ''
- desc: into the
  persid: ''
- desc: vertex buffer should be rendered while it puts them into our JavaScript array,
    which then gets flattened and sent to the GPU
  persid: ''
- desc: for rendering
  persid: ''
- desc: so when we're
  persid: ''
- desc: if we're not, if we're not at zero so some JavaScript here, what is the three
    equal signs
  persid: ''
- desc: we are to come to this
  persid: ''
- desc: and I suggest the equality. So usually we have three. So one equal sign is
    assigned assignment two is equality. And what is three really equal so yeah, we're
    testing the tape passing the type of the value as well as a value so so when we
    get down to zero, we're going to push those diseases into the array, so we're
  persid: ''
- desc: going to draw triangles with them.
  persid: ''
- desc: So when we're not at the rate or not at the our count is greater than zero.
    We're not finished reversing yet. We'll take those three points and we find the
    midpoint between them. So regenerate a B to PC PCs and midpoints and then we are
    using a vertex from from the original call WSCA. Or
  persid: ''
- desc: so we draw a triangle and he goes half so we have the one for row one original
    vertex and then the two midpoints so we get a triangle that's half the size and
    we do that for the other two sides of issue vertices. And that gives us a shape
    makes sense
  persid: ''
- desc: now the other one that I want to look at
  persid: ''
- desc: so here we've made
  persid: ''
- desc: gasket into a tetrahedron. So it's a tetrahedron with lots of holes
  persid: ''
- desc: so
  persid: ''
- desc: so we have a vertex shader and our fragment shader pretty straightforward
    stuff. So we're getting the position and we're using the color using
  persid: ''
- desc: vertex color here Okay so I
  persid: ''
- desc: change this or change back first
  persid: ''
- desc: i
  persid: ''
- desc: Okay so here we have a three dimensional object and we're assigning colors
    based on the faces that we see so everything that's on this triangle this face
    of the tetrahedron gets red the sun gets green this one gets blue so
  persid: ''
- desc: in order to
  persid: ''
- desc: let's see what happens if you don't enable the depth testing that's not what
    I expected to happen
  persid: ''
- desc: so we see
  persid: ''
- desc: the points we're wearing a tetrahedron is but because we're not able to we
    don't get the color information because it's
  persid: ''
- desc: unclear
  persid: ''
- desc: okay
  persid: ''
- desc: so enabling the depth test means that we can ROI to put into display the points
    that are closest to us so we're imagining treating the tetrahedron as a solid
    object
  persid: ''
- desc: this is a way see
  persid: ''
- desc: if we were in a solid object, we would see points behind and so forth
  persid: ''
- desc: so
  persid: ''
- desc: here we are. We're creating a color buffer and we're using
  persid: ''
- desc: an array
  persid: ''
- desc: so we have colors
  persid: ''
- desc: and positions so so like we do for the In positions, we create a buffer for
    the colors and we put into that
  persid: ''
- desc: buffer
  persid: ''
- desc: the flattened colors array
  persid: ''
- desc: and we connect a color
  persid: ''
- desc: in the shader
  persid: ''
- desc: to the buffer
  persid: ''
- desc: so each color is three floating point values
  persid: ''
- desc: and then here we have
  persid: ''
- desc: vertex buffer
  persid: ''
- desc: okay
  persid: ''
- desc: so in JavaScript you don't have to define functions before you use them so
    they can be anywhere in the file
  persid: ''
- desc: so we're gonna start with the four vertices and we're gonna do the same kind
    of division so when we get to the end of our recursion, we're going to create
    it called a Tetra function which is going to
  persid: ''
- desc: be create a triangle, create four triangles for the tetrahedron and we're
    going to color each of them a different color
  persid: ''
- desc: and then the triangle function so we've defined four colors so the first one
    is red, green, blue, and the fourth one is black. So we're going to take so we
    have three triangles three vertices, pardon me. So for each of the three vertices
    in the triangle, we're going to use the same color so we're putting pushing a
    color and then vertex A the color protects B and the color and then vertex C.
    So these are two different arrays in JavaScript but they match up so the colors
    will be applied to the vertices Does that make sense? So let's change the colors
    around here what do you predict will happen
  persid: ''
- desc: on all black you might see some black
  persid: ''
- desc: Yeah, so there's black. Yeah. So the red is on the face that's away from us.
  persid: ''
- desc: Should we try in our last 10 minutes to add color to the triangles in ask
    him to example. Okay,
  persid: ''
- desc: so what can we need
  persid: ''
- desc: let's look at I'm Rusty with IBI. So in the fragment shader we need a color
    and F color You. should give up on big this is the most extensive textbook I've
    ever had
  persid: ''
- desc: this text wasn't the most expensive
  persid: ''
- desc: I'm not hopeful for my editing skills within the last minute bring this together
    because it makes sense what I'm doing is this so useful to me read the code together
    so we'll move on to chapter three next week I'll finish this up anyway more blood
    chatted through next week and I invite you to
  persid: ''
- desc: participate more freely in class and tell me what I need to be so we can avoid
    the times to be sitting and typing and everybody quiet here and I think that like
    The use of our time together anyway thank you for today so it was a little smoother
    than last day I'll keep working on that and I would welcome your input suggestions
    and so forth banks have so have a good weekend have an office hours today as well
    as well for sellers Monday Tuesday Wednesday and Thursday. So with that have a
    good day take care.
  persid: ''
- desc: participate more freely in class and tell me what I need to be so we can avoid
    the times to be sitting and typing and everybody quiet here and I think that like
    The use of our time together anyway thank you for today so it was a little smoother
    than last day I'll keep working on that and I would welcome your input suggestions
    and so forth banks have so have a good weekend have an office hours today as well
    as well for sellers Monday Tuesday Wednesday and Thursday. So with that have a
    good day take care.
  persid: ''
offering:
  id: CS-733-202230
